{
	"info": {
		"_postman_id": "ffe179f6-d763-4a17-9280-bbe0be2f24f2",
		"name": "NorthBound",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26269507"
	},
	"item": [
		{
			"name": "feature",
			"item": [
				{
					"name": "Customer",
					"item": [
						{
							"name": "Test_postive flow",
							"item": [
								{
									"name": "set the global value of master token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"var clientId = \"66bcu8r8usmhrsqa41gmctitms\";\r",
													"\r",
													"var clientSecret = \"\";\r",
													"\r",
													"var username = \"adminnorth01@yopmail.com\";\r",
													"\r",
													"var password = \"Pass@12345\";\r",
													"pm.sendRequest({\r",
													"\r",
													"           url: \"https://cognito-idp.eu-central-1.amazonaws.com/\",\r",
													"\r",
													"           method: 'POST',\r",
													"\r",
													"           header: {\r",
													"\r",
													"                    'X-Amz-Target':   'AWSCognitoIdentityProviderService.InitiateAuth',\r",
													"\r",
													"                    'Content-Type': 'application/x-amz-json-1.1'\r",
													"\r",
													"                   },\r",
													"\r",
													"            body: {\r",
													"\r",
													"                   mode: 'raw',\r",
													"\r",
													"                   raw: JSON.stringify({\r",
													"\r",
													"                   \"AuthParameters\": {\r",
													"\r",
													"                   \"USERNAME\": username,\r",
													"\r",
													"                   \"PASSWORD\": password\r",
													"\r",
													"                   },\r",
													"\r",
													"                  \"AuthFlow\": \"USER_PASSWORD_AUTH\",\r",
													"\r",
													"                  \"ClientId\": clientId\r",
													"\r",
													"  }),\r",
													"\r",
													"options: {\r",
													"\r",
													"raw: {\r",
													"\r",
													"language: 'json'\r",
													"\r",
													"}\r",
													"\r",
													"}\r",
													"\r",
													"}\r",
													"\r",
													"}, function (error, response) {\r",
													"\r",
													"console.log(response.json());\r",
													"\r",
													"pm.environment.set(\"cognitoAccessToken\", response.json().AuthenticationResult.AccessToken);\r",
													"\r",
													"pm.environment.set(\"cognitoIdToken\", response.json().AuthenticationResult.IdToken);\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://cognito-idp.eu-central-1.amazonaws.com/",
											"protocol": "https",
											"host": [
												"cognito-idp",
												"eu-central-1",
												"amazonaws",
												"com"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Test should pass after a new customer is created with valid details",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"window = {};\r",
													"pm.sendRequest(\"https://cdnjs.cloudflare.com/ajax/libs/Faker/3.1.0/faker.min.js\", (error, response) => {\r",
													"    if (error || response.code !== 200) {\r",
													"        pm.expect.fail('Could not load external library');\r",
													"    }\r",
													"    eval(response.text());\r",
													"    // Set faker library\r",
													"    window.faker.locale=\"en\";\r",
													"     pm.collectionVariables.set(\"lastname\", window.faker.name.firstName());\r",
													"    pm.collectionVariables.set(\"firstname\", window.faker.name.lastName());\r",
													"    pm.collectionVariables.set(\"customername\", window.faker.name.firstName());\r",
													"    emailid=pm.collectionVariables.get(\"firstname\")+\"_\"+pm.collectionVariables.get(\"lastname\")+\"@yopmail.com\";\r",
													"    pm.collectionVariables.set(\"email\",emailid);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response time to create an customer account is \"+pm.response.responseTime +\"ms\", function () {\r",
													"    // pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"id\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"adminLastName\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"adminFirstName\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"customerName\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"customerDescription\": {\r",
													"      \"type\": \"null\"\r",
													"    },\r",
													"    \"customerType\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"adminEmail\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"createdAt\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"id\",\r",
													"    \"adminLastName\",\r",
													"    \"adminFirstName\",\r",
													"    \"customerName\",\r",
													"    \"customerDescription\",\r",
													"    \"customerType\",\r",
													"    \"adminEmail\",\r",
													"    \"createdAt\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"var jsonResponse =pm.response.json\r",
													"var data2 = [true, 123];\r",
													"\r",
													"pm.test('Validate the schema of Post custmer API', function () {\r",
													"    // pm.expect(tv4.validate(jsonResponse, schema)).to.be.true;\r",
													"    // pm.expect(tv4.validate(data2, schema)).to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"adminLastName\": \"{{lastname}}\",\r\n    \"adminFirstName\": \"{{firstname}}\",\r\n    \"customerName\": \"{{customername}}\",\r\n    \"adminEmail\": \"{{email}}\",\r\n    \"customerType\": \"WAREHOUSE\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/feature/customers",
											"host": [
												"{{url}}"
											],
											"path": [
												"feature",
												"customers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Retrieve data of Created customer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													" var responseJson = pm.response.json();\r",
													"pm.test(\"Checking firstname of the created customer\", function(){    pm.expect(responseJson.data[0].adminFirstName).to.eql(pm.collectionVariables.get(\"firstname\"));})\r",
													"pm.test(\"Checking lastname of the created customer\", function(){    pm.expect(responseJson.data[0].adminLastName).to.eql(pm.collectionVariables.get(\"lastname\"));})\r",
													"pm.test(\"Checking customerName of the created customer\", function(){    pm.expect(responseJson.data[0].customerName).to.eql(pm.collectionVariables.get(\"customername\"));})\r",
													"pm.test(\"Checking email of the created customer\", function(){    pm.expect(responseJson.data[0].adminEmail).to.eql(pm.collectionVariables.get(\"email\"));})\r",
													"pm.collectionVariables.set(\"id\",responseJson.data[0].id);\r",
													"pm.test(\"Response time to reterieve an customer details is \"+pm.response.responseTime +\"ms\", function () {\r",
													"    // pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/feature/customers?page=1&page_size=50&order_by=descCreatedAt",
											"host": [
												"{{url}}"
											],
											"path": [
												"feature",
												"customers"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "page_size",
													"value": "50"
												},
												{
													"key": "order_by",
													"value": "descCreatedAt"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test should pass after a new customer is deleted",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Deleted account Successfully\", function () {\r",
													"    pm.response.to.have.body(\"\\\"DELETED\\\"\\n\")\r",
													"});\r",
													"pm.test(\"Response time to delete an customer account is \"+pm.response.responseTime +\"ms\", function () {\r",
													"    // pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/feature/customers/{{id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"feature",
												"customers",
												"{{id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test should pass after a new customer is created",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													" var responseJson = pm.response.json();\r",
													"pm.test(\"Checking firstname of the deleted customer\", function(){    pm.expect(responseJson.data[0].adminFirstName).to.not.eql(pm.collectionVariables.get(\"firstname\"));})\r",
													"pm.test(\"Checking lastname of the deleted customer\", function(){    pm.expect(responseJson.data[0].adminLastName).to.not.eql(pm.collectionVariables.get(\"lastname\"));})\r",
													"pm.test(\"Checking customerName of the deleted customer\", function(){    pm.expect(responseJson.data[0].customerName).to.not.eql(pm.collectionVariables.get(\"customername\"));})\r",
													"pm.test(\"Checking email of the deleted customer\", function(){    pm.expect(responseJson.data[0].adminEmail).to.not.eql(pm.collectionVariables.get(\"email\"));})\r",
													"pm.collectionVariables.unset(\"id\",responseJson.data[0].id);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/feature/customers?page=1&page_size=50&order_by=descCreatedAt&Authorization=eyJraWQiOiIxVHROR1E2Q2tiMnFUaU4wTzVrcEx6RHVsN1U1Vk9tREFzRDAxOE96cjFJPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI5ZjA4N2NiMS1iNTQ1LTRjNTAtYTFiOS00ZjIwMWRkMGU4ZDQiLCJkZXZpY2Vfa2V5IjoiZXUtY2VudHJhbC0xXzkzYTFhMGVkLTNiMmYtNDk3Ni1iNjZiLTdlMDZiOTk4MDhlMSIsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5ldS1jZW50cmFsLTEuYW1hem9uYXdzLmNvbVwvZXUtY2VudHJhbC0xX3Nac0h3eHlIMCIsImNsaWVudF9pZCI6IjY2YmN1OHI4dXNtaHJzcWE0MWdtY3RpdG1zIiwib3JpZ2luX2p0aSI6ImIyYzI0MmJiLWI5OTAtNDAxOS05Mzg2LWYwYTMzNjQ0NGUxMCIsImV2ZW50X2lkIjoiYTYwYTQwOGYtNmM4Ni00MTJjLWExMTktYmE2NGRiZDE5NGE0IiwidG9rZW5fdXNlIjoiYWNjZXNzIiwic2NvcGUiOiJhd3MuY29nbml0by5zaWduaW4udXNlci5hZG1pbiIsImF1dGhfdGltZSI6MTY4MTc0MTQxMSwiZXhwIjoxNjgxODI3ODExLCJpYXQiOjE2ODE3NDE0MTEsImp0aSI6IjEzZWRjMGMzLTdiMzgtNDQxZi1hYWM2LWM4ZWJiNTA1ODBlNCIsInVzZXJuYW1lIjoiOWYwODdjYjEtYjU0NS00YzUwLWExYjktNGYyMDFkZDBlOGQ0In0.jA4ZJe0ObplBq_l56--LDJ4QMqwPbqA3RUqp1nO6qucfB4CGT7Hc0yPpFAG6ORYmx4N_ca1ifdDVJyfGlldafVjyihJR6HZCpVVnbPzffskDH4thhBa1Adkr0c0sehvCaTdMqpRSslhixJKNDVRAYMLSfWtSL878BIYz-8jujp6LXohCJUqnRJQkVIgDQ5TPtKprhWCgukafEMcQ--YUwayQQIFApIpLQcvcw_EfuGaLu5Gt2cXnaNzZQAh1YlRMLCF71xydgmB52gztxfMSNUCWKIXuz7lBDI0lm9TWrtkK2qtKt8ZCMg0CFshBNrwwoo3PVdOFCRSj4BvQB7CP7g",
											"host": [
												"{{url}}"
											],
											"path": [
												"feature",
												"customers"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "page_size",
													"value": "50"
												},
												{
													"key": "order_by",
													"value": "descCreatedAt"
												},
												{
													"key": "Authorization",
													"value": "eyJraWQiOiIxVHROR1E2Q2tiMnFUaU4wTzVrcEx6RHVsN1U1Vk9tREFzRDAxOE96cjFJPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI5ZjA4N2NiMS1iNTQ1LTRjNTAtYTFiOS00ZjIwMWRkMGU4ZDQiLCJkZXZpY2Vfa2V5IjoiZXUtY2VudHJhbC0xXzkzYTFhMGVkLTNiMmYtNDk3Ni1iNjZiLTdlMDZiOTk4MDhlMSIsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5ldS1jZW50cmFsLTEuYW1hem9uYXdzLmNvbVwvZXUtY2VudHJhbC0xX3Nac0h3eHlIMCIsImNsaWVudF9pZCI6IjY2YmN1OHI4dXNtaHJzcWE0MWdtY3RpdG1zIiwib3JpZ2luX2p0aSI6ImIyYzI0MmJiLWI5OTAtNDAxOS05Mzg2LWYwYTMzNjQ0NGUxMCIsImV2ZW50X2lkIjoiYTYwYTQwOGYtNmM4Ni00MTJjLWExMTktYmE2NGRiZDE5NGE0IiwidG9rZW5fdXNlIjoiYWNjZXNzIiwic2NvcGUiOiJhd3MuY29nbml0by5zaWduaW4udXNlci5hZG1pbiIsImF1dGhfdGltZSI6MTY4MTc0MTQxMSwiZXhwIjoxNjgxODI3ODExLCJpYXQiOjE2ODE3NDE0MTEsImp0aSI6IjEzZWRjMGMzLTdiMzgtNDQxZi1hYWM2LWM4ZWJiNTA1ODBlNCIsInVzZXJuYW1lIjoiOWYwODdjYjEtYjU0NS00YzUwLWExYjktNGYyMDFkZDBlOGQ0In0.jA4ZJe0ObplBq_l56--LDJ4QMqwPbqA3RUqp1nO6qucfB4CGT7Hc0yPpFAG6ORYmx4N_ca1ifdDVJyfGlldafVjyihJR6HZCpVVnbPzffskDH4thhBa1Adkr0c0sehvCaTdMqpRSslhixJKNDVRAYMLSfWtSL878BIYz-8jujp6LXohCJUqnRJQkVIgDQ5TPtKprhWCgukafEMcQ--YUwayQQIFApIpLQcvcw_EfuGaLu5Gt2cXnaNzZQAh1YlRMLCF71xydgmB52gztxfMSNUCWKIXuz7lBDI0lm9TWrtkK2qtKt8ZCMg0CFshBNrwwoo3PVdOFCRSj4BvQB7CP7g"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Test_Negative flow",
							"item": [
								{
									"name": "Test should fail with invalid email for customer",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"window = {};\r",
													"pm.sendRequest(\"https://cdnjs.cloudflare.com/ajax/libs/Faker/3.1.0/faker.min.js\", (error, response) => {\r",
													"    if (error || response.code !== 200) {\r",
													"        pm.expect.fail('Could not load external library');\r",
													"    }\r",
													"    eval(response.text());\r",
													"    // Set faker library\r",
													"    window.faker.locale=\"en\";\r",
													"    emailid=pm.collectionVariables.get(\"firstname\")+\"_\"+pm.collectionVariables.get(\"lastname\")+\"yopmail.com\";\r",
													"    pm.collectionVariables.set(\"invalidEmailCustomer\",emailid);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code for invalid customer is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Not a valid email address. error message appear\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Not a valid email address.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"adminLastName\": \"Jay\",\r\n    \"adminFirstName\": \"Patel\",\r\n    \"customerName\": \"New Customer\",\r\n    \"adminEmail\": \"{{invalidEmailCustomer}}\",\r\n    \"customerType\": \"WAREHOUSE\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/feature/customers",
											"host": [
												"{{url}}"
											],
											"path": [
												"feature",
												"customers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test should fail after enter special character and number in text field",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Status code is 400 after enter special character and number in name text field\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"adminLastName\": \"432%$$^$&\",\r\n    \"adminFirstName\": \"&9695874\",\r\n    \"customerName\": \"New Customer\",\r\n    \"adminEmail\": \"{{$randomEmail}}\",\r\n    \"customerType\": \"WAREHOUSE\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/feature/customers",
											"host": [
												"{{url}}"
											],
											"path": [
												"feature",
												"customers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test should fail if email id is alredy is existed",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//user already exist\r",
													"pm.test(\"Verify Message User is already exist in account for customer\", function (){\r",
													"    pm.response.to.have.body(\"{\\\"message\\\": \\\"User already exists\\\"}\\n\")\r",
													"});\r",
													"pm.test(\"Status code of existed user for customer\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Response time for existed email for customer\" +pm.response.responseTime+\" ms\", function () {\r",
													"    // pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"pm.test(\"Status code for existed customer name has Bad Request\", function () {    \r",
													"    pm.response.to.have.status(\"Bad Request\");});\r",
													"pm.test(\"Content-Type header is present\", () => {\r",
													"  pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"adminLastName\": \"Jay\",\r\n    \"adminFirstName\": \"Patel\",\r\n    \"customerName\": \"New Customer\",\r\n    \"adminEmail\": \"adminnorth02@yopmail.com\",\r\n    \"customerType\": \"WAREHOUSE\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/feature/customers",
											"host": [
												"{{url}}"
											],
											"path": [
												"feature",
												"customers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test should fail after leaving first name and last name text field",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Status code is 400 after leaving First name and last name blank\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"adminLastName\": \"\",\r\n    \"adminFirstName\": \"\",\r\n    \"customerName\": \"New Customer\",\r\n    \"adminEmail\": \"{{$randomEmail}}\",\r\n    \"customerType\": \"WAREHOUSE\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/feature/customers",
											"host": [
												"{{url}}"
											],
											"path": [
												"feature",
												"customers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test should fail after leaving Customer name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Status code is 400 after leaving Customer name blank\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"adminLastName\": \"james\",\r\n    \"adminFirstName\": \"d\",\r\n    \"customerName\": \"\",\r\n    \"adminEmail\": \"{{$randomEmail}}\",\r\n    \"customerType\": \"WAREHOUSE\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/feature/customers",
											"host": [
												"{{url}}"
											],
											"path": [
												"feature",
												"customers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test should fail after leaving email field",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Status code is 400 after leaving email field\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"adminLastName\": \"Jay\",\r\n    \"adminFirstName\": \"Patel\",\r\n    \"customerName\": \"New Customer\",\r\n    \"adminEmail\": \"\",\r\n    \"customerType\": \"WAREHOUSE\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/feature/customers",
											"host": [
												"{{url}}"
											],
											"path": [
												"feature",
												"customers"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Add Customer",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"adminLastName\": \"Nikunj\",\r\n    \"adminFirstName\": \"Panchal\",\r\n    \"customerName\": \"New Warehouse\",\r\n    \"adminEmail\": \"nikunj@simformsolutions.com\",\r\n    \"customerType\": \"WAREHOUSE\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/feature/customers",
									"host": [
										"{{url}}"
									],
									"path": [
										"feature",
										"customers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Customers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/feature/customers?page=1&page_size=50&order_by=descCreatedAt",
									"host": [
										"{{url}}"
									],
									"path": [
										"feature",
										"customers"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "page_size",
											"value": "50"
										},
										{
											"key": "order_by",
											"value": "descCreatedAt"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Customer",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/feature/customers/ab082a71-35fd-4fa2-813f-58de2646d1da",
									"host": [
										"{{url}}"
									],
									"path": [
										"feature",
										"customers",
										"ab082a71-35fd-4fa2-813f-58de2646d1da"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Administration",
					"item": [
						{
							"name": "Colleague",
							"item": [
								{
									"name": "Test_Get Newly created colleague",
									"item": [
										{
											"name": "Capture Warehouses id",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson = pm.response.json();\r",
															"pm.collectionVariables.set(\"warehouseid\",responseJson.data[1].id);\r",
															"console.log(pm.collectionVariables.get(\"warehouseid\"));\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "customer-id",
														"value": "{{customer-id}}",
														"type": "text"
													},
													{
														"key": "customer-id",
														"value": "c0ab44d1-4306-41dc-8395-a5c5f98bfda1",
														"description": "PARTNER CUSTOMER ID",
														"type": "text",
														"disabled": true
													},
													{
														"key": "",
														"value": "8b621f84-bcc4-4f83-acbd-3e0c8ba1a13a",
														"description": "WAREHOUSE CUSTOMER ID",
														"type": "text",
														"disabled": true
													},
													{
														"key": "Authorization",
														"value": "{{cognitoAccessToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{url}}/feature/configuration/warehouses?for=PARTNER",
													"host": [
														"{{url}}"
													],
													"path": [
														"feature",
														"configuration",
														"warehouses"
													],
													"query": [
														{
															"key": "for",
															"value": "PARTNER"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Test should pass after a new invite colleagueis created",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"window = {};\r",
															"pm.sendRequest(\"https://cdnjs.cloudflare.com/ajax/libs/Faker/3.1.0/faker.min.js\", (error, response) => {\r",
															"    if (error || response.code !== 200) {\r",
															"        pm.expect.fail('Could not load external library');\r",
															"    }\r",
															"\r",
															"    eval(response.text());\r",
															"    // Set faker library\r",
															"    window.faker.locale=\"en\";\r",
															"     pm.collectionVariables.set(\"colleagueLastname\", window.faker.name.firstName());\r",
															"    pm.collectionVariables.set(\"colleagueFirstname\", window.faker.name.lastName());\r",
															"    emailid=pm.collectionVariables.get(\"colleagueFirstname\")+\"_\"+pm.collectionVariables.get(\"colleagueLastname\")+\"@yopmail.com\";\r",
															"    pm.collectionVariables.set(\"colleagueEmailid\",emailid);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson = pm.response.json();\r",
															"pm.test(\"Response time for created colleague account \"+pm.response.responseTime, function () {\r",
															"    // pm.expect(pm.response.responseTime).to.be.below(200);\r",
															"});\r",
															"pm.collectionVariables.set(\"customeridNegative\",responseJson.id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "customer-id",
														"value": "{{customer-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"firstName\": \"{{colleagueFirstname}}\",\r\n    \"lastName\": \"{{colleagueLastname}}\",\r\n    \"email\": \"{{colleagueEmailid}}\",\r\n    \"userRole\": \"OPERATOR\",\r\n    \"warehouses\": [\r\n        \"{{warehouseid}}\"\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/feature/users/colleagues",
													"host": [
														"{{url}}"
													],
													"path": [
														"feature",
														"users",
														"colleagues"
													]
												}
											},
											"response": []
										},
										{
											"name": "Tested newly created colleagues detail",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															" var responseJson = pm.response.json();\r",
															"\r",
															"pm.test(\"Response time to reterieve colleague account details \"+pm.response.responseTime, function () {\r",
															"    // pm.expect(pm.response.responseTime).to.be.below(200);\r",
															"});\r",
															"pm.test(\"Checking firstname of the created Colleague\", function(){    pm.expect(responseJson.data[0].firstName).to.eql(pm.collectionVariables.get(\"colleagueFirstname\"));})\r",
															"pm.test(\"Checking lastname of the created Colleague\", function(){    pm.expect(responseJson.data[0].lastName).to.eql(pm.collectionVariables.get(\"colleagueLastname\"));})\r",
															"pm.test(\"Checking firstname of the created Colleague\", function(){    pm.expect(responseJson.data[0].email).to.eql(pm.collectionVariables.get(\"colleagueEmailid\"));})\r",
															"pm.collectionVariables.set(\"Colleagueid\",responseJson.data[0].id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "customer-id",
														"value": "{{customer-id}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "eyJraWQiOiIxVHROR1E2Q2tiMnFUaU4wTzVrcEx6RHVsN1U1Vk9tREFzRDAxOE96cjFJPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI4MzBjOTFmNS0yNWVlLTRlMzYtYWQ4ZC0zNTdhMTY1ZDJmYjIiLCJkZXZpY2Vfa2V5IjoiZXUtY2VudHJhbC0xXzJkNTllNTZjLTAwNmMtNDRjMS04MjI3LTVmOGQ2ZGQyODVkZCIsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5ldS1jZW50cmFsLTEuYW1hem9uYXdzLmNvbVwvZXUtY2VudHJhbC0xX3Nac0h3eHlIMCIsImNsaWVudF9pZCI6IjY2YmN1OHI4dXNtaHJzcWE0MWdtY3RpdG1zIiwib3JpZ2luX2p0aSI6ImQ2NjVjZDg2LTM5NjItNGM5NC04YjI3LTFmYmE0ZjE1M2U3MiIsImV2ZW50X2lkIjoiN2FhMGI4MWUtODI5Zi00NDM4LWIzODktMTMwZWIxNDJkNmQ0IiwidG9rZW5fdXNlIjoiYWNjZXNzIiwic2NvcGUiOiJhd3MuY29nbml0by5zaWduaW4udXNlci5hZG1pbiIsImF1dGhfdGltZSI6MTY4MTg4MjE2NywiZXhwIjoxNjgxOTY4NTY3LCJpYXQiOjE2ODE4ODIxNjcsImp0aSI6ImEzMGMyYmRlLTVlNzctNGYzMC1iYjkwLTg4YjgyYTBhYTQyOSIsInVzZXJuYW1lIjoiODMwYzkxZjUtMjVlZS00ZTM2LWFkOGQtMzU3YTE2NWQyZmIyIn0.A7c-0Ie5M9waH7auQx_AMSwa4cdKB1XAq6TVRepjCBlNerQqFabb8oAJvHIWQve2W6t6nzbbEQBPy0DNvRu2mntzOMZmm_SugCJxNBdsiq5WZch7Ar_YkZ_BotzNLMw-oYtc7lTpf5Nw9ueMSEllCspJYMVRIkbZyXpdSBuVoK3TiaaWQbZsvtCPnO7VcZd0yG-mCOhPzNaaBk9iKQLUjKF_v7SouLoD86hI3Ldq3RhfdIw5yeyT1PDw2bew-m85epEg9mYjepfvoh1kwkEDppj41entc_ABZhIaDx5i824WiNYegMRidyHWJ_ZBJNGTtK4XTe2zQqJ6NsDbViPWHA",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{url}}/feature/users/colleagues?page=1&page_size=50&order_by=descCreatedAt",
													"host": [
														"{{url}}"
													],
													"path": [
														"feature",
														"users",
														"colleagues"
													],
													"query": [
														{
															"key": "page",
															"value": "1"
														},
														{
															"key": "page_size",
															"value": "50"
														},
														{
															"key": "warehouse_id",
															"value": "c4f292fa-fb3b-4888-88b2-5450b10322b9",
															"disabled": true
														},
														{
															"key": "order_by",
															"value": "descCreatedAt"
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"",
													"pm.test(\"Status code name has  Ok\", function () {    ",
													"    pm.response.to.have.status(\"OK\");});"
												]
											}
										}
									]
								},
								{
									"name": "Test_Updated the details of Colleagues",
									"item": [
										{
											"name": "Test should pass after a new invite colleague details is updated",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"     pm.collectionVariables.set(\"colleagueupdatedLastname\", \"John\");\r",
															"    pm.collectionVariables.set(\"colleagueupdatedFirstname\",\"_doe\");\r",
															"    emailid=\"Updated\"+pm.collectionVariables.get(\"colleagueLastname\")+pm.collectionVariables.get(\"colleagueFirstname\")+\"@yopmail.com\";\r",
															"    pm.collectionVariables.set(\"colleagueupdatedEmailid\",emailid);\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response time for updating colleague accounts \"+pm.response.responseTime, function () {\r",
															"    // pm.expect(pm.response.responseTime).to.be.below(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "customer-id",
														"value": "{{customer-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"firstName\": \"{{colleagueupdatedFirstname}}\",\r\n    \"lastName\": \"{{colleagueupdatedLastname}}\",\r\n    \"userRole\": \"OPERATOR\",\r\n    \"warehouses\": [\r\n        \"{{warehouseid}}\"\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/feature/users/colleagues/{{Colleagueid}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"feature",
														"users",
														"colleagues",
														"{{Colleagueid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Updated Colleagues Details",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															" var responseJson = pm.response.json();\r",
															"pm.test(\"Checking firstname of the updated Colleague\", function(){    pm.expect(responseJson.data[0].firstName).to.eql(pm.collectionVariables.get(\"colleagueupdatedFirstname\"));})\r",
															"pm.test(\"Checking lastname of the updated Colleague\", function(){    pm.expect(responseJson.data[0].lastName).to.eql(pm.collectionVariables.get(\"colleagueupdatedLastname\"));})\r",
															"pm.test(\"Checking email of the updated Colleague\", function(){    pm.expect(responseJson.data[0].email).to.eql(pm.collectionVariables.get(\"colleagueupdatedEmailid\"));})\r",
															"pm.collectionVariables.set(\"Colleagueid\",responseJson.data[0].id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "customer-id",
														"value": "{{customer-id}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{url}}/feature/users/colleagues?page=1&page_size=50&order_by=descCreatedAt",
													"host": [
														"{{url}}"
													],
													"path": [
														"feature",
														"users",
														"colleagues"
													],
													"query": [
														{
															"key": "page",
															"value": "1"
														},
														{
															"key": "page_size",
															"value": "50"
														},
														{
															"key": "warehouse_id",
															"value": "c4f292fa-fb3b-4888-88b2-5450b10322b9",
															"disabled": true
														},
														{
															"key": "order_by",
															"value": "descCreatedAt"
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Status code name has  Ok\", function () {    ",
													"    pm.response.to.have.status(\"OK\");});"
												]
											}
										}
									]
								},
								{
									"name": "Test_Deleted colleague",
									"item": [
										{
											"name": "Test should pass after a new invite colleague details is updated",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Deleted account Successfully\", function () {\r",
															"    pm.response.to.have.body(\"\\\"DELETED\\\"\\n\")\r",
															"});\r",
															"pm.test(\"Response time for deleting colleague accounts \"+pm.response.responseTime, function () {\r",
															"    // pm.expect(pm.response.responseTime).to.be.below(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "customer-id",
														"value": "{{customer-id}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{url}}/feature/users/colleagues/{{Colleagueid}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"feature",
														"users",
														"colleagues",
														"{{Colleagueid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "check the data after Colleagues data deleted",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson = pm.response.json();\r",
															"pm.test(\"Checking firstname of the deleted Colleague\", function(){    pm.expect(responseJson.data[0].firstName).to.not.eql(pm.collectionVariables.get(\"colleagueupdatedFirstname\"));})\r",
															"pm.test(\"Checking lastname of the deleted Colleague\", function(){    pm.expect(responseJson.data[0].lastName).to.not.eql(pm.collectionVariables.get(\"colleagueupdatedLastname\"));})\r",
															"pm.test(\"Checking email of the deleted Colleague\", function(){    pm.expect(responseJson.data[0].email).to.not.eql(pm.collectionVariables.get(\"colleagueupdatedEmailid\"));})"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "customer-id",
														"value": "{{customer-id}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{url}}/feature/users/colleagues?page=1&page_size=50&order_by=descCreatedAt",
													"host": [
														"{{url}}"
													],
													"path": [
														"feature",
														"users",
														"colleagues"
													],
													"query": [
														{
															"key": "page",
															"value": "1"
														},
														{
															"key": "page_size",
															"value": "50"
														},
														{
															"key": "warehouse_id",
															"value": "c4f292fa-fb3b-4888-88b2-5450b10322b9",
															"disabled": true
														},
														{
															"key": "order_by",
															"value": "descCreatedAt"
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"",
													"pm.test(\"Status code is 200 for deted custo\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Status code name has  Ok\", function () {    ",
													"    pm.response.to.have.status(\"OK\");});"
												]
											}
										}
									]
								},
								{
									"name": "Test_ColleagueNegativeScenario",
									"item": [
										{
											"name": "Test should be fail with Invalid emailid for colleagues(Post)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"After invalid email Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Not a valid email address. error message appear\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Not a valid email address.\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "customer-id",
														"value": "{{customer-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"firstName\": \"Jay\",\r\n    \"lastName\": \"Patel\",\r\n    \"email\": \"jay12123abc.com\",\r\n    \"userRole\": \"OPERATOR\",\r\n    \"warehouses\": [\r\n        \"{{warehouseid}}\"\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/feature/users/colleagues",
													"host": [
														"{{url}}"
													],
													"path": [
														"feature",
														"users",
														"colleagues"
													]
												}
											},
											"response": []
										},
										{
											"name": "Test should be fail with existing email for colleagues",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//user already exist\r",
															"pm.test(\"Validation message with existed account\", function () {\r",
															"    pm.response.to.have.body(\"{\\\"message\\\": \\\"User already exists\\\"}\\n\")\r",
															"});\r",
															"pm.test(\"Status code of existed user for colleagues\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Content-Type header is present for colleagues\", () => {\r",
															"  pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Content-Type header is application/json for colleagues\", () => {\r",
															"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "customer-id",
														"value": "{{customer-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"firstName\": \"Jay\",\r\n    \"lastName\": \"Patel\",\r\n    \"email\": \"adminnorth02@yopmail.com\",\r\n    \"userRole\": \"OPERATOR\",\r\n    \"warehouses\": [\r\n        \"{{warehouseid}}\"\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/feature/users/colleagues",
													"host": [
														"{{url}}"
													],
													"path": [
														"feature",
														"users",
														"colleagues"
													]
												}
											},
											"response": []
										},
										{
											"name": "Test should be fail after enter special character on first and last name",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"After entering alphabets and special characters for colleagues status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"validation on first name and last name fields by entering alphabets and special characters for colleagues\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Not a valid email address.\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "customer-id",
														"value": "{{customer-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"firstName\": \"@%$&^$*$\",\r\n    \"lastName\": \"$&*^#^%##^\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"userRole\": \"OPERATOR\",\r\n    \"warehouses\": [\r\n        \"{{warehouseid}}\"\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/feature/users/colleagues",
													"host": [
														"{{url}}"
													],
													"path": [
														"feature",
														"users",
														"colleagues"
													]
												}
											},
											"response": []
										},
										{
											"name": "Test should be fail after leaving email field on customer api",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"After leaving email field status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Not a valid email address. error message appear after leaving email text field\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Not a valid email address.\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "customer-id",
														"value": "{{customer-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"firstName\": \"Test\",\r\n    \"lastName\": \"User\",\r\n    \"email\": \"\",\r\n    \"userRole\": \"OPERATOR\",\r\n    \"warehouses\": [\r\n        \"{{warehouseid}}\"\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/feature/users/colleagues",
													"host": [
														"{{url}}"
													],
													"path": [
														"feature",
														"users",
														"colleagues"
													]
												}
											},
											"response": []
										},
										{
											"name": "Test should be fail after leaving first name and customer on post colleagues api",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"After leaving first name and last name status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Not a valid email address. error message appear\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Not a valid email address.\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "customer-id",
														"value": "{{customer-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"firstName\": \"\",\r\n    \"lastName\": \"\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"userRole\": \"OPERATOR\",\r\n    \"warehouses\": [\r\n        \"{{warehouseid}}\"\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/feature/users/colleagues",
													"host": [
														"{{url}}"
													],
													"path": [
														"feature",
														"users",
														"colleagues"
													]
												}
											},
											"response": []
										},
										{
											"name": "Test should be fail after leaving user role for post colleagues api",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"After leaving user role status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Invalid enum member error message appear after leaving user role\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Invalid enum member\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "customer-id",
														"value": "{{customer-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"firstName\": \"Test\",\r\n    \"lastName\": \"user2\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"userRole\": \"\",\r\n    \"warehouses\": [\r\n        \"{{warehouseid}}\"\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/feature/users/colleagues",
													"host": [
														"{{url}}"
													],
													"path": [
														"feature",
														"users",
														"colleagues"
													]
												}
											},
											"response": []
										},
										{
											"name": "Test should be failed when user enter invalid email in patch method for colleagues",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"After enter invalid email status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Unknown field error message appear after enter invalid email\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Not a valid UUID.\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "customer-id",
														"value": "{{customer-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"firstName\": \"Mustafa Updated\",\r\n    \"lastName\": \"Updated Lastname\",\r\n    \"email\": \"jay55email.com\",\r\n    \"userRole\": \"OPERATOR\",\r\n    \"warehouses\": [\r\n        \"{{warehouse_id}}\"\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/feature/users/colleagues/9321afcd-9f1e-45fa-a15d-1ed63a6602da",
													"host": [
														"{{url}}"
													],
													"path": [
														"feature",
														"users",
														"colleagues",
														"9321afcd-9f1e-45fa-a15d-1ed63a6602da"
													]
												}
											},
											"response": []
										},
										{
											"name": "Test should fail after leaving first name and last name",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"After leaving first name and last name status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Unknown field error message appear after enter invalid email\", function () {\r",
															"    // pm.expect(pm.response.text()).to.include(\"Not a valid UUID.\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "customer-id",
														"value": "{{customer-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"firstName\": \"\",\r\n    \"lastName\": \"\",\r\n    \"userRole\": \"OPERATOR\",\r\n    \"warehouses\": [\r\n        \"{{warehouseid}}\"\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/feature/users/colleagues/{{customeridNegative}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"feature",
														"users",
														"colleagues",
														"{{customeridNegative}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Test should be fail after leaving customer name text field",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"After leaving user role status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Invalid enum member message appear after leaving user role\", function () {\r",
															"     pm.expect(pm.response.text()).to.include(\"Invalid enum member \");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "customer-id",
														"value": "{{customer-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"firstName\": \"Mustafa Updated\",\r\n    \"lastName\": \"Updated Lastname\",\r\n    \"userRole\": \"\",\r\n    \"warehouses\": [\r\n        \"{{warehouseid}}\"\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/feature/users/colleagues/{{customeridNegative}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"feature",
														"users",
														"colleagues",
														"{{customeridNegative}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Invite Colleague",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "customer-id",
												"value": "{{customer-id}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\": \"Jay\",\r\n    \"lastName\": \"Patel\",\r\n    \"email\": \"jay99@abc.com\",\r\n    \"userRole\": \"OPERATOR\",\r\n    \"warehouses\": [\r\n        \"{{warehouse-id}}\"\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/feature/users/colleagues",
											"host": [
												"{{url}}"
											],
											"path": [
												"feature",
												"users",
												"colleagues"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Colleagues",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "customer-id",
												"value": "{{customer-id}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/feature/users/colleagues?page=1&page_size=50&order_by=ascIsSignedUp",
											"host": [
												"{{url}}"
											],
											"path": [
												"feature",
												"users",
												"colleagues"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "page_size",
													"value": "50"
												},
												{
													"key": "order_by",
													"value": "ascIsSignedUp"
												},
												{
													"key": "warehouse_id",
													"value": "c4f292fa-fb3b-4888-88b2-5450b10322b9",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Edit Colleague",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "customer-id",
												"value": "{{customer-id}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\": \"Mustafa Updated\",\r\n    \"lastName\": \"Updated Lastname\",\r\n    \"email\": \"jay55@email.com\",\r\n    \"userRole\": \"OPERATOR\",\r\n    \"warehouses\": [\r\n        \"3f6b5962-a9e9-4dee-b6d1-c9732f26edb0\"\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/feature/users/colleagues/9321afcd-9f1e-45fa-a15d-1ed63a6602da",
											"host": [
												"{{url}}"
											],
											"path": [
												"feature",
												"users",
												"colleagues",
												"9321afcd-9f1e-45fa-a15d-1ed63a6602da"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Colleague",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "customer-id",
												"value": "{{customer-id}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/feature/users/colleagues/e9d89bf8-c787-4b7f-990f-58b229e0774e",
											"host": [
												"{{url}}"
											],
											"path": [
												"feature",
												"users",
												"colleagues",
												"e9d89bf8-c787-4b7f-990f-58b229e0774e"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Partner",
							"item": [
								{
									"name": "Test_Positiveflow",
									"item": [
										{
											"name": "Test should pass after a new invite Partner is created",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"window = {};\r",
															"pm.sendRequest(\"https://cdnjs.cloudflare.com/ajax/libs/Faker/3.1.0/faker.min.js\", (error, response) => {\r",
															"    if (error || response.code !== 200) {\r",
															"        pm.expect.fail('Could not load external library');\r",
															"    }\r",
															"\r",
															"    eval(response.text());\r",
															"    // Set faker library\r",
															"    window.faker.locale=\"en\";\r",
															"     pm.collectionVariables.set(\"partnerLastname\", window.faker.name.firstName());\r",
															"    pm.collectionVariables.set(\"partnerFirstname\", window.faker.name.lastName());\r",
															"    pm.collectionVariables.set(\"partnerCustomername\", window.faker.name.lastName());\r",
															"    emailid=pm.collectionVariables.get(\"partnerFirstname\")+\"_\"+pm.collectionVariables.get(\"partnerLastname\")+\"@yopmail.com\";\r",
															"    pm.collectionVariables.set(\"partnerEmailid\",emailid);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response time for invite new partner \"+ pm.response.responseTime +\" ms\", function () {\r",
															"    // pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "customer-id",
														"value": "{{customer-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"adminLastName\": \"{{partnerLastname}}\",\r\n    \"adminFirstName\": \"{{partnerFirstname}}\",\r\n    \"customerName\": \"{{partnerCustomername}}\",\r\n    \"adminEmail\": \"{{partnerEmailid}}\",\r\n    \"warehouses\": [\r\n        \"{{warehouseid}}\"\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/feature/users/partners",
													"host": [
														"{{url}}"
													],
													"path": [
														"feature",
														"users",
														"partners"
													]
												}
											},
											"response": []
										},
										{
											"name": "Reterive the data of invited partner",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															" var responseJson = pm.response.json();\r",
															"pm.test(\"Status code name has  Ok\", function () {    \r",
															"    pm.response.to.have.status(\"OK\");});\r",
															"pm.test(\"Checking firstname of the created Partner\", function(){    pm.expect(responseJson.data[0].adminFirstName).to.eql(pm.collectionVariables.get(\"partnerFirstname\"));})\r",
															"pm.test(\"Checking lastname of the created Partner\", function(){    pm.expect(responseJson.data[0].adminLastName).to.eql(pm.collectionVariables.get(\"partnerLastname\"));})\r",
															"pm.test(\"Checking customer name of the created Partner\", function(){    pm.expect(responseJson.data[0].customerName).to.eql(pm.collectionVariables.get(\"partnerCustomername\"));})\r",
															"pm.test(\"Checking email of the created Partner\", function(){    pm.expect(responseJson.data[0].adminEmail).to.eql(pm.collectionVariables.get(\"partnerEmailid\"));})\r",
															"pm.collectionVariables.set(\"Partnerid\",responseJson.data[0].customerID);\r",
															"console.info(pm.collectionVariables.get(\"Partnerid\"));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "customer-id",
														"value": "{{customer-id}}",
														"type": "text"
													},
													{
														"key": "order_by",
														"value": "descCreateAt",
														"type": "text",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{url}}/feature/users/partners?page=1&page_size=50&order_by=descCreatedAt",
													"host": [
														"{{url}}"
													],
													"path": [
														"feature",
														"users",
														"partners"
													],
													"query": [
														{
															"key": "page",
															"value": "1"
														},
														{
															"key": "page_size",
															"value": "50"
														},
														{
															"key": "warehouse_id",
															"value": "6cefc21b-c917-4cbc-83a0-945530290dff",
															"disabled": true
														},
														{
															"key": "order_by",
															"value": "descCreatedAt"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Update Partner Details Copy",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															" \r",
															"     pm.collectionVariables.set(\"partnerupdatedLastname\", \"shawn\");\r",
															"      pm.collectionVariables.set(\"partnerupdatedcustomerName\", \"Updated shawn\");\r",
															"    pm.collectionVariables.set(\"partnerupdatedFirstname\",\"Men\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															" var responseJson = pm.response.json(); \r",
															"//  pm.collectionVariables.set(\"Partnerid\",responseJson.data[0].id);\r",
															"pm.test(\"Response time for updating Partner accounts \"+pm.response.responseTime, function () {\r",
															"    // pm.expect(pm.response.responseTime).to.be.below(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "customer-id",
														"value": "{{customer-id}}",
														"type": "text"
													},
													{
														"key": "order_by",
														"value": "abc",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"adminLastName\": \"{{partnerupdatedLastname}}\",\r\n    \"adminFirstName\": \"{{partnerupdatedFirstname}}\",\r\n    \"customerName\": \"{{partnerupdatedcustomerName}}\",\r\n    \"warehouses\": [\r\n        \"{{warehouseid}}\"\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/feature/users/partners/{{Partnerid}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"feature",
														"users",
														"partners",
														"{{Partnerid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update Partner Details",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															" \r",
															"     pm.collectionVariables.set(\"partnerupdatedLastname\", \"shawn\");\r",
															"      pm.collectionVariables.set(\"partnerupdatedcustomerName\", \"Updated shawn\");\r",
															"    pm.collectionVariables.set(\"partnerupdatedFirstname\",\"Men\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															" var responseJson = pm.response.json(); \r",
															"//  pm.collectionVariables.set(\"Partnerid\",responseJson.data[0].id);\r",
															"pm.test(\"Response time for updating Partner accounts \"+pm.response.responseTime, function () {\r",
															"    // pm.expect(pm.response.responseTime).to.be.below(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "customer-id",
														"value": "{{customer-id}}",
														"type": "text"
													},
													{
														"key": "order_by",
														"value": "abc",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"adminLastName\": \"{{partnerupdatedLastname}}\",\r\n    \"adminFirstName\": \"{{partnerupdatedFirstname}}\",\r\n    \"customerName\": \"{{partnerupdatedcustomerName}}\",\r\n    \"warehouses\": [\r\n        \"{{warehouseid}}\"\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/feature/users/partners/{{Partnerid}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"feature",
														"users",
														"partners",
														"{{Partnerid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Updated details of Partner",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															" var responseJson = pm.response.json();\r",
															"pm.test(\"Status code name has  Ok\", function () {    \r",
															"    pm.response.to.have.status(\"OK\");});\r",
															"pm.test(\"Checking firstname of the updated Partner\", function(){    pm.expect(responseJson.data[0].adminFirstName).to.eql(pm.collectionVariables.get(\"partnerFirstname\"));})\r",
															"pm.test(\"Checking lastname of the updated Partner\", function(){    pm.expect(responseJson.data[0].adminLastName).to.eql(pm.collectionVariables.get(\"partnerLastname\"));})\r",
															"pm.test(\"Checking customer name of the updated Partner\", function(){    pm.expect(responseJson.data[0].customerName).to.eql(pm.collectionVariables.get(\"partnerCustomername\"));})\r",
															"pm.collectionVariables.set(\"Partnerid\",responseJson.data[0].customerID);\r",
															"console.info(pm.collectionVariables.get(\"Partnerid\"));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "customer-id",
														"value": "{{customer-id}}",
														"type": "text"
													},
													{
														"key": "order_by",
														"value": "descCreateAt",
														"type": "text",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{url}}/feature/users/partners?page=1&page_size=50&order_by=descCreatedAt",
													"host": [
														"{{url}}"
													],
													"path": [
														"feature",
														"users",
														"partners"
													],
													"query": [
														{
															"key": "page",
															"value": "1"
														},
														{
															"key": "page_size",
															"value": "50"
														},
														{
															"key": "warehouse_id",
															"value": "6cefc21b-c917-4cbc-83a0-945530290dff",
															"disabled": true
														},
														{
															"key": "order_by",
															"value": "descCreatedAt"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete Partner",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response time for delete partner accounts \"+pm.response.responseTime, function () {\r",
															"    // pm.expect(pm.response.responseTime).to.be.below(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "customer-id",
														"value": "{{customer-id}}",
														"type": "text"
													},
													{
														"key": "order_by",
														"value": "abc",
														"type": "text",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{url}}/feature/users/partners/{{Partnerid}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"feature",
														"users",
														"partners",
														"{{Partnerid}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												]
											}
										}
									]
								},
								{
									"name": "Test_Negative flow",
									"item": [
										{
											"name": "Test should be fail after creating partner with same email id",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "customer-id",
														"value": "{{customer-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"adminLastName\": \"Patel\",\r\n    \"adminFirstName\": \"Jay\",\r\n    \"customerName\": \"Customer Name\",\r\n    \"adminEmail\": \"test@new.com\",\r\n    \"warehouses\": [\r\n        \"{{warehouseid}}\"\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/feature/users/partners",
													"host": [
														"{{url}}"
													],
													"path": [
														"feature",
														"users",
														"partners"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invite Partner Copy 2",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "customer-id",
														"value": "{{customer-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"adminLastName\": \"Patel\",\r\n    \"adminFirstName\": \"Jay\",\r\n    \"customerName\": \"Customer Name\",\r\n    \"adminEmail\": \"test@new.com\",\r\n    \"warehouses\": [\r\n        \"{{warehouseid}}\"\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/feature/users/partners",
													"host": [
														"{{url}}"
													],
													"path": [
														"feature",
														"users",
														"partners"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invite Partner Copy 2",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "customer-id",
														"value": "{{customer-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"adminLastName\": \"Patel\",\r\n    \"adminFirstName\": \"Jay\",\r\n    \"customerName\": \"Customer Name\",\r\n    \"adminEmail\": \"test@new.com\",\r\n    \"warehouses\": [\r\n        \"{{warehouseid}}\"\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/feature/users/partners",
													"host": [
														"{{url}}"
													],
													"path": [
														"feature",
														"users",
														"partners"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invite Partner Copy 2",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "customer-id",
														"value": "{{customer-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"adminLastName\": \"Patel\",\r\n    \"adminFirstName\": \"Jay\",\r\n    \"customerName\": \"Customer Name\",\r\n    \"adminEmail\": \"test@new.com\",\r\n    \"warehouses\": [\r\n        \"{{warehouseid}}\"\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/feature/users/partners",
													"host": [
														"{{url}}"
													],
													"path": [
														"feature",
														"users",
														"partners"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Invite Partner",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "customer-id",
												"value": "{{customer-id}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"adminLastName\": \"Patel\",\r\n    \"adminFirstName\": \"Jay\",\r\n    \"customerName\": \"Customer Name\",\r\n    \"adminEmail\": \"test7@new.com\",\r\n    \"warehouses\": [\r\n        \"{{warehouse-id}}\"\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/feature/users/partners",
											"host": [
												"{{url}}"
											],
											"path": [
												"feature",
												"users",
												"partners"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Partner",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "customer-id",
												"value": "{{customer-id}}",
												"type": "text"
											},
											{
												"key": "order_by",
												"value": "descCreateAt",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/feature/users/partners?order_by=ascIsActive&page=1&page_size=50",
											"host": [
												"{{url}}"
											],
											"path": [
												"feature",
												"users",
												"partners"
											],
											"query": [
												{
													"key": "order_by",
													"value": "ascIsActive"
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "page_size",
													"value": "50"
												},
												{
													"key": "warehouse_id",
													"value": "6cefc21b-c917-4cbc-83a0-945530290dff",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Edit Partner",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "customer-id",
												"value": "{{customer-id}}",
												"type": "text"
											},
											{
												"key": "order_by",
												"value": "abc",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"adminLastName\": \"Patel1\",\r\n    \"adminFirstName\": \"Jay1\",\r\n    \"customerName\": \"Customer1 Name1\",\r\n    \"warehouses\": [\r\n        \"ac644df9-0bf8-4a19-b2bd-6b23d8bc9211\"\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/feature/users/partners/d2772d00-7e51-4a7b-b99a-d90398b4983b",
											"host": [
												"{{url}}"
											],
											"path": [
												"feature",
												"users",
												"partners",
												"d2772d00-7e51-4a7b-b99a-d90398b4983b"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Partner",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "customer-id",
												"value": "{{customer-id}}",
												"type": "text"
											},
											{
												"key": "order_by",
												"value": "abc",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/feature/users/partners/0890d39a-fa2e-4e72-91aa-44f4b6804234",
											"host": [
												"{{url}}"
											],
											"path": [
												"feature",
												"users",
												"partners",
												"0890d39a-fa2e-4e72-91aa-44f4b6804234"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Configuration",
					"item": [
						{
							"name": "Warehouse",
							"item": [
								{
									"name": "Test Data of new Warehouse",
									"item": [
										{
											"name": "Test should pass after enter valid value to create warehouse",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"\r",
															"window = {};\r",
															"pm.sendRequest(\"https://cdnjs.cloudflare.com/ajax/libs/Faker/3.1.0/faker.min.js\", (error, response) => {\r",
															"    if (error || response.code !== 200) {\r",
															"        pm.expect.fail('Could not load external library');\r",
															"    }\r",
															"    eval(response.text());\r",
															"    // Set faker library\r",
															"    window.faker.locale=\"en\";\r",
															"     pm.collectionVariables.set(\"WareouseName\", \"Warehouse \" +window.faker.name.firstName());\r",
															"    pm.collectionVariables.set(\"WarehouseAddress\", window.faker.address.streetName());\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200 \", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Response time for creating new warehouse \"+pm.response.responseTime, function () {\r",
															"    // pm.expect(pm.response.responseTime).to.be.below(200);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "customer-id",
														"value": "{{customer-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"name\": \"{{WareouseName}}\",\n    \"address\": \"{{WarehouseAddress}}\",\n    \"latitude\": \"23.7891231\",\n    \"longitude\": \"24.234242\",\n    \"description\": \"this is description \",\n    \"arrivalInstructions\": \"this is arrival instructions\",\n    \"arrivalInstructionsImage\": {\n        \"fileName\": \"test.png\",\n        \"contentType\": \"image/png\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/feature/configuration/warehouses",
													"host": [
														"{{url}}"
													],
													"path": [
														"feature",
														"configuration",
														"warehouses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Test should pass  to reterieve the data of new warehouses",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson = pm.response.json();\r",
															"pm.test(\"Checking name of the created warehoues\", function(){    pm.expect(responseJson.data[0].name).to.eql(pm.collectionVariables.get(\"WareouseName\"));})\r",
															"pm.test(\"Checking address of the created warehouse\", function(){    pm.expect(responseJson.data[0].address).to.eql(pm.collectionVariables.get(\"WarehouseAddress\"));})\r",
															"pm.collectionVariables.set(\"warehouse_id\",responseJson.data[0].id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "customer-id",
														"value": "{{customer-id}}",
														"type": "text"
													},
													{
														"key": "customer-id",
														"value": "c0ab44d1-4306-41dc-8395-a5c5f98bfda1",
														"description": "PARTNER CUSTOMER ID",
														"type": "text",
														"disabled": true
													},
													{
														"key": "",
														"value": "8b621f84-bcc4-4f83-acbd-3e0c8ba1a13a",
														"description": "WAREHOUSE CUSTOMER ID",
														"type": "text",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{url}}/feature/configuration/warehouses?for=PARTNER/descCreatedAt",
													"host": [
														"{{url}}"
													],
													"path": [
														"feature",
														"configuration",
														"warehouses"
													],
													"query": [
														{
															"key": "for",
															"value": "PARTNER/descCreatedAt"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Test should fail when user try to create warehouse with same name and address",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"User is not able to create warehouse with same name and aaddress\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Warehouse already exists message appear on response body when user try to create warehouse with same name and desc\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Warehouse already exists\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "customer-id",
														"value": "{{customer-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"name\": \"{{WareouseName}}\",\n    \"address\": \"{{WarehouseAddress}}\",\n    \"latitude\": \"23.7891231\",\n    \"longitude\": \"24.234242\",\n    \"description\": \"this is description \",\n    \"arrivalInstructions\": \"this is arrival instructions\",\n    \"arrivalInstructionsImage\": {\n        \"fileName\": \"test.png\",\n        \"contentType\": \"image/png\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/feature/configuration/warehouses",
													"host": [
														"{{url}}"
													],
													"path": [
														"feature",
														"configuration",
														"warehouses"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Test Updated Warehouse and Delte warehouse",
									"item": [
										{
											"name": "Test should fail when user try to update warehouse with same name and address",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"     pm.collectionVariables.set(\"updatedwarehouse\", \"updated \"+pm.collectionVariables.get(\"WareouseName\"));\r",
															"    pm.collectionVariables.set(\"updatedWarehouseAddress\",\"updated \"+pm.collectionVariables.get(\"WarehouseAddress\"));\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code for updated warehouse 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Response time for updated warehouse\" +pm.response.responseTime, function () {\r",
															"    // pm.expect(pm.response.responseTime).to.be.below(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "customer-id",
														"value": "{{customer-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"longitude\": 43.43476,\n    \"name\": \"{{updatedwarehouse}} \",\n    \"latitude\": -0.6496,\n    \"address\": \"{{updatedWarehouseAddress}}\",\n    \"description\": \"Montana\",\n    \"arrivalInstructions\": \"wer\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/feature/configuration/warehouses/{{warehouse_id}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"feature",
														"configuration",
														"warehouses",
														"{{warehouse_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Updated Warehouses data",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson = pm.response.json();\r",
															"\r",
															" pm.collectionVariables.set(\"warehouse_id\",responseJson.data[0].id);\r",
															" pm.test(\"Checking name of the updated warehoues\", function(){    pm.expect(responseJson.data[0].name).to.eql(pm.collectionVariables.get(\"updatedwarehouse\")+\" \");})\r",
															"pm.test(\"Checking address of the updated warehouse\", function(){    pm.expect(responseJson.data[0].address).to.eql(pm.collectionVariables.get(\"updatedWarehouseAddress\"));})"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "customer-id",
														"value": "{{customer-id}}",
														"type": "text"
													},
													{
														"key": "customer-id",
														"value": "c0ab44d1-4306-41dc-8395-a5c5f98bfda1",
														"description": "PARTNER CUSTOMER ID",
														"type": "text",
														"disabled": true
													},
													{
														"key": "",
														"value": "8b621f84-bcc4-4f83-acbd-3e0c8ba1a13a",
														"description": "WAREHOUSE CUSTOMER ID",
														"type": "text",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{url}}/feature/configuration/warehouses?for=PARTNER/ascCreatedAt",
													"host": [
														"{{url}}"
													],
													"path": [
														"feature",
														"configuration",
														"warehouses"
													],
													"query": [
														{
															"key": "for",
															"value": "PARTNER/ascCreatedAt"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete Warehouse Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															"pm.test(\"Response time to delete warehouse \"+pm.response.responseTime, function () {\r",
															"    // pm.expect(pm.response.responseTime).to.be.below(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "customer-id",
														"value": "{{customer-id}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{url}}/feature/configuration/warehouses/{{warehouse_id}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"feature",
														"configuration",
														"warehouses",
														"{{warehouse_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check data of Warehouses after deletion",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson = pm.response.json();\r",
															" pm.collectionVariables.set(\"warehouse_id\",responseJson.data[0].id);\r",
															" pm.test(\"Checking name of the updated warehoues\", function(){    pm.expect(responseJson.data[0].name).to.not.eql(pm.collectionVariables.get(\"WareouseName\"));})\r",
															"pm.test(\"Checking address of the updated warehouse\", function(){    pm.expect(responseJson.data[0].address).to.not.eql(pm.collectionVariables.get(\"WarehouseAddress\"));})"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "customer-id",
														"value": "{{customer-id}}",
														"type": "text"
													},
													{
														"key": "customer-id",
														"value": "c0ab44d1-4306-41dc-8395-a5c5f98bfda1",
														"description": "PARTNER CUSTOMER ID",
														"type": "text",
														"disabled": true
													},
													{
														"key": "",
														"value": "8b621f84-bcc4-4f83-acbd-3e0c8ba1a13a",
														"description": "WAREHOUSE CUSTOMER ID",
														"type": "text",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{url}}/feature/configuration/warehouses?for=PARTNER",
													"host": [
														"{{url}}"
													],
													"path": [
														"feature",
														"configuration",
														"warehouses"
													],
													"query": [
														{
															"key": "for",
															"value": "PARTNER"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Test_Negative flow",
									"item": [
										{
											"name": "Test should fail after leaving warehouse name and address  blank",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "customer-id",
														"value": "{{customer-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"\",\r\n    \"address\": \"\",\r\n    \"latitude\": \"23.7891231\",\r\n    \"longitude\": \"24.234242\",\r\n    \"description\": \"\",\r\n    \"arrivalInstructions\": \"this is arrival instructions\",\r\n    \"arrivalInstructionsImage\": {\r\n        \"fileName\": \"test.png\",\r\n        \"contentType\": \"image/png\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/feature/configuration/warehouses",
													"host": [
														"{{url}}"
													],
													"path": [
														"feature",
														"configuration",
														"warehouses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Test should fail after leaving description blank",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "customer-id",
														"value": "{{customer-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"New Warehouse 6\",\n    \"address\": \"\",\n    \"latitude\": \"23.7891231\",\n    \"longitude\": \"24.234242\",\n    \"description\": \"\",\n    \"arrivalInstructions\": \"this is arrival instructions\",\n    \"arrivalInstructionsImage\": {\n        \"fileName\": \"test.png\",\n        \"contentType\": \"image/png\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/feature/configuration/warehouses",
													"host": [
														"{{url}}"
													],
													"path": [
														"feature",
														"configuration",
														"warehouses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Test should fail when user try to update same name and address",
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "customer-id",
														"value": "{{customer-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"longitude\": 43.43476,\n    \"name\": \"Montana \",\n    \"latitude\": -0.6496,\n    \"address\": \"Mont, Nouvelle-Aquitaine, France\",\n    \"description\": \"Montana\",\n    \"arrivalInstructions\": \"warehouse\",\n    \"arrivalInstructionsImage\": {\n        \"fileName\": \"test1.png\",\n        \"contentType\": \"image/png\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/feature/configuration/warehouses/c2d24f90-87f5-4f72-bea7-c853a50f4b52",
													"host": [
														"{{url}}"
													],
													"path": [
														"feature",
														"configuration",
														"warehouses",
														"c2d24f90-87f5-4f72-bea7-c853a50f4b52"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Create Warehouse",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "customer-id",
												"value": "{{customer-id}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"name\": \"Test Warehouse\",\n    \"address\": \"Ahmedabad, GJ\",\n    \"latitude\": \"23.7891231\",\n    \"longitude\": \"24.234242\",\n    \"description\": \"this is description \",\n    \"arrivalInstructions\": \"this is arrival instructions\",\n    \"arrivalInstructionsImage\": {\n        \"fileName\": \"test.png\",\n        \"contentType\": \"image/png\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/feature/configuration/warehouses",
											"host": [
												"{{url}}"
											],
											"path": [
												"feature",
												"configuration",
												"warehouses"
											]
										}
									},
									"response": []
								},
								{
									"name": "List Warehouses",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "customer-id",
												"value": "{{customer-id}}",
												"type": "text"
											},
											{
												"key": "customer-id",
												"value": "c0ab44d1-4306-41dc-8395-a5c5f98bfda1",
												"description": "PARTNER CUSTOMER ID",
												"type": "text",
												"disabled": true
											},
											{
												"key": "",
												"value": "8b621f84-bcc4-4f83-acbd-3e0c8ba1a13a",
												"description": "WAREHOUSE CUSTOMER ID",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/feature/configuration/warehouses?order_by=ascName",
											"host": [
												"{{url}}"
											],
											"path": [
												"feature",
												"configuration",
												"warehouses"
											],
											"query": [
												{
													"key": "for",
													"value": "WAREHOUSE",
													"disabled": true
												},
												{
													"key": "page",
													"value": "1",
													"disabled": true
												},
												{
													"key": "page_size",
													"value": "3",
													"disabled": true
												},
												{
													"key": "order_by",
													"value": "ascName"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Warehouse",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "customer-id",
												"value": "{{customer-id}}",
												"type": "text"
											},
											{
												"key": "customer-id",
												"value": "c0ab44d1-4306-41dc-8395-a5c5f98bfda1",
												"description": "PARTNER CUSTOMER ID",
												"type": "text",
												"disabled": true
											},
											{
												"key": "",
												"value": "8b621f84-bcc4-4f83-acbd-3e0c8ba1a13a",
												"description": "WAREHOUSE CUSTOMER ID",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/feature/configuration/warehouses/{{warehouse-id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"feature",
												"configuration",
												"warehouses",
												"{{warehouse-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Warehouse data Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													"pm.test(\"Response time for deleting warehouse\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "customer-id",
												"value": "{{customer-id}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/feature/configuration/warehouses/{{warehouse-id}}/delete-warehouse-image",
											"host": [
												"{{url}}"
											],
											"path": [
												"feature",
												"configuration",
												"warehouses",
												"{{warehouse-id}}",
												"delete-warehouse-image"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Warehouse",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "customer-id",
												"value": "{{customer-id}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"longitude\": 43.43476,\n    \"name\": \"Montana \",\n    \"latitude\": -0.6496,\n    \"address\": \"Mont, Nouvelle-Aquitaine, France\",\n    \"description\": \"Montana\",\n    \"arrivalInstructions\": \"warehouse\",\n    \"arrivalInstructionsImage\": {\n        \"fileName\": \"test1.png\",\n        \"contentType\": \"image/png\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/feature/configuration/warehouses/c2d24f90-87f5-4f72-bea7-c853a50f4b52",
											"host": [
												"{{url}}"
											],
											"path": [
												"feature",
												"configuration",
												"warehouses",
												"c2d24f90-87f5-4f72-bea7-c853a50f4b52"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Warehouse",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "customer-id",
												"value": "{{customer-id}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/feature/configuration/warehouses/bd1fd3c0-4363-4094-a88c-59ae40bb12da",
											"host": [
												"{{url}}"
											],
											"path": [
												"feature",
												"configuration",
												"warehouses",
												"bd1fd3c0-4363-4094-a88c-59ae40bb12da"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Groups",
							"item": [
								{
									"name": "Test_Created Group",
									"item": [
										{
											"name": "Tested Newly Created Ramp Group",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"\r",
															"window = {};\r",
															"pm.sendRequest(\"https://cdnjs.cloudflare.com/ajax/libs/Faker/3.1.0/faker.min.js\", (error, response) => {\r",
															"    if (error || response.code !== 200) {\r",
															"        pm.expect.fail('Could not load external library');\r",
															"    }\r",
															"    eval(response.text());\r",
															"    // Set faker library\r",
															"    window.faker.locale=\"en\";\r",
															"     pm.collectionVariables.set(\"GroupName\", window.faker.name.firstName()+\" Group\");\r",
															"    pm.collectionVariables.set(\"GroupDesc\", \"Warehouse group\");\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response time to create new group \"+pm.response.responseTime, function () {\r",
															"    // pm.expect(pm.response.responseTime).to.be.below(200);\r",
															"});\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "customer-id",
														"value": "{{customer-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"{{GroupName}}\",\n    \"description\": \"{{GroupDesc}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/feature/configuration/warehouses/{{warehouseid}}/ramp-groups",
													"host": [
														"{{url}}"
													],
													"path": [
														"feature",
														"configuration",
														"warehouses",
														"{{warehouseid}}",
														"ramp-groups"
													]
												}
											},
											"response": []
										},
										{
											"name": "Test should pass after a Ramp Group details is fetched and displayed.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson = pm.response.json();\r",
															"pm.test(\"Checking name of the created ramp group\", function(){    pm.expect(responseJson.data[0].name).to.eql(pm.collectionVariables.get(\"GroupName\"));})\r",
															"pm.test(\"Checking description of the created ramp group\", function () { pm.expect(responseJson.data[0].description).to.eql(pm.collectionVariables.get(\"GroupDesc\")); })\r",
															"pm.collectionVariables.set(\"groupid\",responseJson.data[0].id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "customer-id",
														"value": "{{customer-id}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{url}}/feature/configuration/warehouses/{{warehouseid}}/ramp-groups?page=1&page_size=10&order_by=descCreatedAt",
													"host": [
														"{{url}}"
													],
													"path": [
														"feature",
														"configuration",
														"warehouses",
														"{{warehouseid}}",
														"ramp-groups"
													],
													"query": [
														{
															"key": "page",
															"value": "1"
														},
														{
															"key": "page_size",
															"value": "10"
														},
														{
															"key": "order_by",
															"value": "descCreatedAt"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Test_Updated group",
									"item": [
										{
											"name": "Test should fail after update same group name",
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "customer-id",
														"value": "{{customer-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"New Ramp Group Updated latest asdsa\",\n    \"description\": \"This is just for description updated latest asdsa\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/feature/configuration/warehouses/{{warehouse-id}}/ramp-groups/e27741a6-9bd8-44e0-8c6c-a338b2bc6e09",
													"host": [
														"{{url}}"
													],
													"path": [
														"feature",
														"configuration",
														"warehouses",
														"{{warehouse-id}}",
														"ramp-groups",
														"e27741a6-9bd8-44e0-8c6c-a338b2bc6e09"
													]
												}
											},
											"response": []
										},
										{
											"name": "Test should pass after a Ramp Group details is updated.",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"\r",
															"window = {};\r",
															"pm.sendRequest(\"https://cdnjs.cloudflare.com/ajax/libs/Faker/3.1.0/faker.min.js\", (error, response) => {\r",
															"    if (error || response.code !== 200) {\r",
															"        pm.expect.fail('Could not load external library');\r",
															"    }\r",
															"    eval(response.text());\r",
															"    // Set faker library\r",
															"    window.faker.locale=\"en\";\r",
															"     pm.collectionVariables.set(\"UpdatedGroupName\", \"Updated \"+pm.collectionVariables.get(\"GroupName\"));\r",
															"    pm.collectionVariables.set(\"updatedGroupDesc\", \"Updated \"+\"Warehouse group updated\");\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Updated group name status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Respnse time taken to update ramp group \"+pm.response,responseTime,function(){\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "customer-id",
														"value": "{{customer-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"{{UpdatedGroupName}}\",\n    \"description\": \"{{updatedGroupDesc}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/feature/configuration/warehouses/{{warehouseid}}/ramp-groups/{{groupid}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"feature",
														"configuration",
														"warehouses",
														"{{warehouseid}}",
														"ramp-groups",
														"{{groupid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Reterieve Ramp Groups data after updating the group",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "customer-id",
														"value": "{{customer-id}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{url}}/feature/configuration/warehouses/{{warehouseid}}/ramp-groups?page=1&page_size=10&order_by=descCreatedAt",
													"host": [
														"{{url}}"
													],
													"path": [
														"feature",
														"configuration",
														"warehouses",
														"{{warehouseid}}",
														"ramp-groups"
													],
													"query": [
														{
															"key": "page",
															"value": "1"
														},
														{
															"key": "page_size",
															"value": "10"
														},
														{
															"key": "order_by",
															"value": "descCreatedAt"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Test_Delete Ramp Group",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"After deleting the ramp group status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "customer-id",
														"value": "{{customer-id}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{url}}/feature/configuration/warehouses/{{warehouseid}}/ramp-groups/{{groupid}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"feature",
														"configuration",
														"warehouses",
														"{{warehouseid}}",
														"ramp-groups",
														"{{groupid}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Test_Negative_Flow",
									"item": [
										{
											"name": "Test should fail with null value in Group name parameter.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Null value in group mname status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Ramp Group already exists messsage appear with null value pass group name\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Ramp Group already exists\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "customer-id",
														"value": "{{customer-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"\",\n    \"description\": \"This is just for description\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/feature/configuration/warehouses/{{warehouse-id}}/ramp-groups",
													"host": [
														"{{url}}"
													],
													"path": [
														"feature",
														"configuration",
														"warehouses",
														"{{warehouse-id}}",
														"ramp-groups"
													]
												}
											},
											"response": []
										},
										{
											"name": "Test should fail with Blank space in group name parameter.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Null value in group mname status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Ramp Group already exists messsage appear with blank space value pass group name\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Ramp Group already exists\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "customer-id",
														"value": "{{customer-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \" \",\n    \"description\": \"This is just for description\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/feature/configuration/warehouses/{{warehouse-id}}/ramp-groups",
													"host": [
														"{{url}}"
													],
													"path": [
														"feature",
														"configuration",
														"warehouses",
														"{{warehouse-id}}",
														"ramp-groups"
													]
												}
											},
											"response": []
										},
										{
											"name": "Test should fail with Missing name parameter in ramp group.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Null value in group mname status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Ramp Group already exists messsage appear with missing name parameter\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Missing data for required field.\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "customer-id",
														"value": "{{customer-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"description\": \"This is just for description\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/feature/configuration/warehouses/{{warehouse-id}}/ramp-groups",
													"host": [
														"{{url}}"
													],
													"path": [
														"feature",
														"configuration",
														"warehouses",
														"{{warehouse-id}}",
														"ramp-groups"
													]
												}
											},
											"response": []
										},
										{
											"name": "Test should fail with null value in group description parameter.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Null value in group description status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Ramp Group already exists messsage appear with null value in group descripton\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Ramp Group already exists\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "customer-id",
														"value": "{{customer-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"New Ramp Group 2\",\n    \"description\": \"\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/feature/configuration/warehouses/{{warehouse-id}}/ramp-groups",
													"host": [
														"{{url}}"
													],
													"path": [
														"feature",
														"configuration",
														"warehouses",
														"{{warehouse-id}}",
														"ramp-groups"
													]
												}
											},
											"response": []
										},
										{
											"name": "Test should fail with Missing Group description parameter.",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "customer-id",
														"value": "{{customer-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"New Ramp Group 2\",\n    \"description\": \"This is just for description\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/feature/configuration/warehouses/{{warehouse-id}}/ramp-groups",
													"host": [
														"{{url}}"
													],
													"path": [
														"feature",
														"configuration",
														"warehouses",
														"{{warehouse-id}}",
														"ramp-groups"
													]
												}
											},
											"response": []
										},
										{
											"name": "Test should fail with Missing group description parameter.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"missing group descripton parameter status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Internal Server Error messsage appear with missing group descripton parameter\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Internal Server Error\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "customer-id",
														"value": "{{customer-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"New Ramp Group 2\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/feature/configuration/warehouses/{{warehouse-id}}/ramp-groups",
													"host": [
														"{{url}}"
													],
													"path": [
														"feature",
														"configuration",
														"warehouses",
														"{{warehouse-id}}",
														"ramp-groups"
													]
												}
											},
											"response": []
										},
										{
											"name": "Test should pass after a Ramp Group details is fetched and displayed.",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "customer-id",
														"value": "{{customer-id}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{url}}/feature/configuration/warehouses/{{warehouse-id}}/ramp-groups?page=1&page_size=10&order_by=descCreatedAt",
													"host": [
														"{{url}}"
													],
													"path": [
														"feature",
														"configuration",
														"warehouses",
														"{{warehouse-id}}",
														"ramp-groups"
													],
													"query": [
														{
															"key": "page",
															"value": "1"
														},
														{
															"key": "page_size",
															"value": "10"
														},
														{
															"key": "order_by",
															"value": "descCreatedAt"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Test should fail after passing null value in group name at the time of update",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"missing group name in update method status code is 500\", function () {\r",
															"    pm.response.to.have.status(500);\r",
															"});\r",
															"pm.test(\"Internal Server Error messsage appear with missing group name in update method\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Internal Server Error\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "customer-id",
														"value": "{{customer-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"\",\n    \"description\": \"This is just for description updated latest asdsa\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/feature/configuration/warehouses/{{warehouse-id}}/ramp-groups/e27741a6-9bd8-44e0-8c6c-a338b2bc6e09",
													"host": [
														"{{url}}"
													],
													"path": [
														"feature",
														"configuration",
														"warehouses",
														"{{warehouse-id}}",
														"ramp-groups",
														"e27741a6-9bd8-44e0-8c6c-a338b2bc6e09"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Add Ramp Group",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "customer-id",
												"value": "{{customer-id}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"New Ramp Group 2\",\n    \"description\": \"This is just for description\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/feature/configuration/warehouses/{{warehouse-id}}/ramp-groups",
											"host": [
												"{{url}}"
											],
											"path": [
												"feature",
												"configuration",
												"warehouses",
												"{{warehouse-id}}",
												"ramp-groups"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Ramp Groups",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "customer-id",
												"value": "{{customer-id}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/feature/configuration/warehouses/{{warehouse-id}}/ramp-groups?page=1&page_size=10&order_by=descCreatedAt",
											"host": [
												"{{url}}"
											],
											"path": [
												"feature",
												"configuration",
												"warehouses",
												"{{warehouse-id}}",
												"ramp-groups"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "page_size",
													"value": "10"
												},
												{
													"key": "order_by",
													"value": "descCreatedAt"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Ramp Group",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "customer-id",
												"value": "{{customer-id}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/feature/configuration/warehouses/{{warehouse-id}}/ramp-groups/0bedf83a-1373-4abd-aa6b-bf3e484f1096",
											"host": [
												"{{url}}"
											],
											"path": [
												"feature",
												"configuration",
												"warehouses",
												"{{warehouse-id}}",
												"ramp-groups",
												"0bedf83a-1373-4abd-aa6b-bf3e484f1096"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Ramp Configuration",
							"item": [
								{
									"name": "Test_Positive flow to add ramp configuration",
									"item": [
										{
											"name": "List Warehouses Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson = pm.response.json();\r",
															"\r",
															" pm.collectionVariables.set(\"warehouseid\",responseJson.data[0].id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "customer-id",
														"value": "{{customer-id}}",
														"type": "text"
													},
													{
														"key": "customer-id",
														"value": "c0ab44d1-4306-41dc-8395-a5c5f98bfda1",
														"description": "PARTNER CUSTOMER ID",
														"type": "text",
														"disabled": true
													},
													{
														"key": "",
														"value": "8b621f84-bcc4-4f83-acbd-3e0c8ba1a13a",
														"description": "WAREHOUSE CUSTOMER ID",
														"type": "text",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{url}}/feature/configuration/warehouses?order_by=descCreatedAt",
													"host": [
														"{{url}}"
													],
													"path": [
														"feature",
														"configuration",
														"warehouses"
													],
													"query": [
														{
															"key": "for",
															"value": "WAREHOUSE",
															"disabled": true
														},
														{
															"key": "page",
															"value": "1",
															"disabled": true
														},
														{
															"key": "page_size",
															"value": "3",
															"disabled": true
														},
														{
															"key": "order_by",
															"value": "descCreatedAt"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Test should pass after a new ramp is created.",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"\r",
															"window = {};\r",
															"pm.sendRequest(\"https://cdnjs.cloudflare.com/ajax/libs/Faker/3.1.0/faker.min.js\", (error, response) => {\r",
															"    if (error || response.code !== 200) {\r",
															"        pm.expect.fail('Could not load external library');\r",
															"    }\r",
															"    eval(response.text());\r",
															"    // Set faker library\r",
															"    window.faker.locale=\"en\";\r",
															"     pm.collectionVariables.set(\"RampName\", window.faker.name.firstName()+\" Ramp\");\r",
															"    // pm.collectionVariables.set(\"GroupDesc\", \"Warehouse group\");\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "customer-id",
														"value": "{{customer-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"{{RampName}}\",\n    \"supportedLoadingType\": [\"BACK_SIDE_WITH_LIFT\", \"BACK_SIDE_WITHOUT_LIFT\"],\n    \"runType\": [\"INBOUND\", \"OUTBOUND\"],\n    \"cargoType\": [\"PALLETS_SINGLE_STACKED\", \"PALLETS_DOUBLE_STACKED\"]  \n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/feature/configuration/warehouses/{{warehouseid}}/ramps",
													"host": [
														"{{url}}"
													],
													"path": [
														"feature",
														"configuration",
														"warehouses",
														"{{warehouseid}}",
														"ramps"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Ramp Configuration Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson = pm.response.json();\r",
															"pm.test(\"Checking name of the created warehoues\", function(){    pm.expect(responseJson.data[0].name).to.eql(pm.collectionVariables.get(\"RampName\"));})\r",
															" pm.collectionVariables.set(\"rampid\",responseJson.data[0].id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "customer-id",
														"value": "{{customer-id}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{url}}/feature/configuration/warehouses/{{warehouseid}}/ramps?page=1&page_size=10&order_by=descCreatedAt",
													"host": [
														"{{url}}"
													],
													"path": [
														"feature",
														"configuration",
														"warehouses",
														"{{warehouseid}}",
														"ramps"
													],
													"query": [
														{
															"key": "page",
															"value": "1"
														},
														{
															"key": "page_size",
															"value": "10"
														},
														{
															"key": "order_by",
															"value": "descCreatedAt"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Update Ramp Configuration Copy",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"\r",
															"window = {};\r",
															"pm.sendRequest(\"https://cdnjs.cloudflare.com/ajax/libs/Faker/3.1.0/faker.min.js\", (error, response) => {\r",
															"    if (error || response.code !== 200) {\r",
															"        pm.expect.fail('Could not load external library');\r",
															"    }\r",
															"    eval(response.text());\r",
															"    // Set faker library\r",
															"    window.faker.locale=\"en\";\r",
															"     pm.collectionVariables.set(\"UpdatedRampName\", window.faker.name.firstName()+\" Ramp updated\");\r",
															"    // pm.collectionVariables.set(\"GroupDesc\", \"Warehouse group\");\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "customer-id",
														"value": "{{customer-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"{{UpdatedRampName}}\",\n    \"supportedLoadingType\": [\"SIDE\", \"OPEN\"],\n    \"runType\": [\"INBOUND\"],\n    \"cargoType\": [\"CAGES\", \"LIQUID\"]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/feature/configuration/warehouses/{{warehouseid}}/ramps/{{rampid}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"feature",
														"configuration",
														"warehouses",
														"{{warehouseid}}",
														"ramps",
														"{{rampid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Ramp Configuration Copy 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson = pm.response.json();\r",
															"pm.test(\"Checking name of the created warehoues\", function(){    pm.expect(responseJson.data[0].name).to.eql(pm.collectionVariables.get(\"UpdatedRampName\"));})\r",
															" pm.collectionVariables.set(\"rampid\",responseJson.data[0].id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "customer-id",
														"value": "{{customer-id}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{url}}/feature/configuration/warehouses/{{warehouseid}}/ramps?page=1&page_size=10&order_by=descCreatedAt",
													"host": [
														"{{url}}"
													],
													"path": [
														"feature",
														"configuration",
														"warehouses",
														"{{warehouseid}}",
														"ramps"
													],
													"query": [
														{
															"key": "page",
															"value": "1"
														},
														{
															"key": "page_size",
															"value": "10"
														},
														{
															"key": "order_by",
															"value": "descCreatedAt"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Test should pass after a Ramp is deleted.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204 after ramp is deleted\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "customer-id",
														"value": "{{customer-id}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{url}}/feature/configuration/warehouses/{{warehouseid}}/ramps/{{rampid}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"feature",
														"configuration",
														"warehouses",
														"{{warehouseid}}",
														"ramps",
														"{{rampid}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Test_Negative flow to cfreate ramp configuration",
									"item": [
										{
											"name": "List Warehouses Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson = pm.response.json();\r",
															"\r",
															" pm.collectionVariables.set(\"warehouseid\",responseJson.data[0].id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "customer-id",
														"value": "{{customer-id}}",
														"type": "text"
													},
													{
														"key": "customer-id",
														"value": "c0ab44d1-4306-41dc-8395-a5c5f98bfda1",
														"description": "PARTNER CUSTOMER ID",
														"type": "text",
														"disabled": true
													},
													{
														"key": "",
														"value": "8b621f84-bcc4-4f83-acbd-3e0c8ba1a13a",
														"description": "WAREHOUSE CUSTOMER ID",
														"type": "text",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{url}}/feature/configuration/warehouses?order_by=descCreatedAt",
													"host": [
														"{{url}}"
													],
													"path": [
														"feature",
														"configuration",
														"warehouses"
													],
													"query": [
														{
															"key": "for",
															"value": "WAREHOUSE",
															"disabled": true
														},
														{
															"key": "page",
															"value": "1",
															"disabled": true
														},
														{
															"key": "page_size",
															"value": "3",
															"disabled": true
														},
														{
															"key": "order_by",
															"value": "descCreatedAt"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Add Ramp Configuration Copy",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "customer-id",
														"value": "{{customer-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"\",\n    \"supportedLoadingType\": [\"BACK_SIDE_WITH_LIFT\", \"BACK_SIDE_WITHOUT_LIFT\"],\n    \"runType\": [\"INBOUND\", \"OUTBOUND\"],\n    \"cargoType\": [\"PALLETS_SINGLE_STACKED\", \"PALLETS_DOUBLE_STACKED\"],\n    \"rampGroups\": [\"9abd3d2f-bfd4-441c-9dac-cc5398b7dc11\"]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/feature/configuration/warehouses/{{warehouse-id}}/ramps",
													"host": [
														"{{url}}"
													],
													"path": [
														"feature",
														"configuration",
														"warehouses",
														"{{warehouse-id}}",
														"ramps"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Add Ramp Configuration",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "customer-id",
												"value": "{{customer-id}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Ramp 1\",\n    \"supportedLoadingType\": [\"BACK_SIDE_WITH_LIFT\", \"BACK_SIDE_WITHOUT_LIFT\"],\n    \"runType\": [\"INBOUND\", \"OUTBOUND\"],\n    \"cargoType\": [\"PALLETS_SINGLE_STACKED\", \"PALLETS_DOUBLE_STACKED\"],\n    \"rampGroups\": [\"9abd3d2f-bfd4-441c-9dac-cc5398b7dc11\"]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/feature/configuration/warehouses/{{warehouse-id}}/ramps",
											"host": [
												"{{url}}"
											],
											"path": [
												"feature",
												"configuration",
												"warehouses",
												"{{warehouse-id}}",
												"ramps"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Ramp Configuration",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "customer-id",
												"value": "{{customer-id}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/feature/configuration/warehouses/{{warehouse-id}}/ramps?page=1&page_size=10&order_by=descCreatedAt",
											"host": [
												"{{url}}"
											],
											"path": [
												"feature",
												"configuration",
												"warehouses",
												"{{warehouse-id}}",
												"ramps"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "page_size",
													"value": "10"
												},
												{
													"key": "order_by",
													"value": "descCreatedAt"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Ramp Configuration",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "customer-id",
												"value": "{{customer-id}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Ramp 1 Updated latest asdasdasd\",\n    \"supportedLoadingType\": [\"SIDE\", \"OPEN\"],\n    \"runType\": [\"INBOUND\"],\n    \"cargoType\": [\"CAGES\", \"LIQUID\"],\n    \"rampGroups\": [\"d5a533db-3272-4f49-b5ba-1d4ab8e93319\"]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/feature/configuration/warehouses/{{warehouse-id}}/ramps/9ec301e9-f08c-4ed7-8857-992dabe555fd",
											"host": [
												"{{url}}"
											],
											"path": [
												"feature",
												"configuration",
												"warehouses",
												"{{warehouse-id}}",
												"ramps",
												"9ec301e9-f08c-4ed7-8857-992dabe555fd"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Ramp Configuration",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "customer-id",
												"value": "{{customer-id}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/feature/configuration/warehouses/{{warehouse-id}}/ramps/e1a178e3-7bfb-4a34-a405-a05c78548472",
											"host": [
												"{{url}}"
											],
											"path": [
												"feature",
												"configuration",
												"warehouses",
												"{{warehouse-id}}",
												"ramps",
												"e1a178e3-7bfb-4a34-a405-a05c78548472"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Ramp Specifications",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "customer-id",
												"value": "{{customer-id}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/feature/configuration/ramp-specifications",
											"host": [
												"{{url}}"
											],
											"path": [
												"feature",
												"configuration",
												"ramp-specifications"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Booking Restrictions",
							"item": [
								{
									"name": "Test_BokingRestriction",
									"item": [
										{
											"name": "Add Warehouse",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson = pm.response.json();\r",
															"pm.collectionVariables.set(\"warehouse_id\",responseJson.id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic"
												},
												"method": "POST",
												"header": [
													{
														"key": "customer-id",
														"value": "{{customer-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"{{$randomFirstName}} \",\n    \"address\": \"AB, TXT, 12313\",\n    \"latitude\": \"23.7891231\",\n    \"longitude\": \"24.234242\",\n    \"description\": \"this is description \",\n    \"arrivalInstructions\": \"this is arrival instructions\",\n    \"arrivalInstructionsImage\": {\n        \"fileName\": \"test.png\",\n        \"contentType\": \"image/png\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/feature/configuration/warehouses",
													"host": [
														"{{url}}"
													],
													"path": [
														"feature",
														"configuration",
														"warehouses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Test should pass after entering valid details for booking restriction",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "customer-id",
														"value": "{{customer-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"standardAppointmentDuration\": 60,\n    \"minimumLeadTimeBeforeAppointmentStart\": 30,\n    \"daysInFutureToAllowBooking\": 7,\n    \"numberOfAppointments\": \"CUSTOM\",\n    \"maxAppointmentsPerDay\": 7,\n    \"maxNoOfAppointmentsAtTheSameTime\": 0,\n    \"plannedTimeForCheckInProcess\": 0\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/feature/configuration/warehouses/{{warehouseid}}/ramp-booking-restrictions",
													"host": [
														"{{url}}"
													],
													"path": [
														"feature",
														"configuration",
														"warehouses",
														"{{warehouseid}}",
														"ramp-booking-restrictions"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Ramp Booking Restriction",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "customer-id",
														"value": "{{customer-id}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{url}}/feature/configuration/warehouses/{{warehouse-id}}/ramp-booking-restrictions",
													"host": [
														"{{url}}"
													],
													"path": [
														"feature",
														"configuration",
														"warehouses",
														"{{warehouse-id}}",
														"ramp-booking-restrictions"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Add Ramp Booking Restriction",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "customer-id",
												"value": "{{customer-id}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"standardAppointmentDuration\": 60,\n    \"minimumLeadTimeBeforeAppointmentStart\": 30,\n    \"daysInFutureToAllowBooking\": 7,\n    \"numberOfAppointments\": \"CUSTOM\",\n    \"maxAppointmentsPerDay\": 7,\n    \"maxNoOfAppointmentsAtTheSameTime\": 0,\n    \"plannedTimeForCheckInProcess\": 15\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/feature/configuration/warehouses/{{warehouse-id}}/ramp-booking-restrictions",
											"host": [
												"{{url}}"
											],
											"path": [
												"feature",
												"configuration",
												"warehouses",
												"{{warehouse-id}}",
												"ramp-booking-restrictions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Ramp Booking Restriction Copy",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "customer-id",
												"value": "{{customer-id}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/feature/configuration/warehouses/{{warehouse-id}}/ramp-booking-restrictions",
											"host": [
												"{{url}}"
											],
											"path": [
												"feature",
												"configuration",
												"warehouses",
												"{{warehouse-id}}",
												"ramp-booking-restrictions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Ramp Booking Restriction",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "customer-id",
												"value": "{{customer-id}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"standardAppointmentDuration\": 60,\n    \"minimumLeadTimeBeforeAppointmentStart\": 30,\n    \"daysInFutureToAllowBooking\": 7,\n    \"numberOfAppointments\": \"CUSTOM\",\n    \"maxAppointmentsPerDay\": 15,\n    \"maxNoOfAppointmentsAtTheSameTime\": 0,\n    \"plannedTimeForCheckInProcess\": 0\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/feature/configuration/warehouses/{{warehouse-id}}/ramp-booking-restrictions/63863367-499f-4314-83e7-29697a495c21",
											"host": [
												"{{url}}"
											],
											"path": [
												"feature",
												"configuration",
												"warehouses",
												"{{warehouse-id}}",
												"ramp-booking-restrictions",
												"63863367-499f-4314-83e7-29697a495c21"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Ramp Booking Restriction",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "customer-id",
												"value": "{{customer-id}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/feature/configuration/warehouses/{{warehouse-id}}/ramp-booking-restrictions/7b265a14-b40f-4102-8e08-e8e16876fc92",
											"host": [
												"{{url}}"
											],
											"path": [
												"feature",
												"configuration",
												"warehouses",
												"{{warehouse-id}}",
												"ramp-booking-restrictions",
												"7b265a14-b40f-4102-8e08-e8e16876fc92"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Ramp Opening Hour",
							"item": [
								{
									"name": "Get Standard Opening Hour",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "customer-id",
												"value": "{{customer-id}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/feature/configuration/warehouses/{{warehouseid}}/ramp-opening-hours",
											"host": [
												"{{url}}"
											],
											"path": [
												"feature",
												"configuration",
												"warehouses",
												"{{warehouseid}}",
												"ramp-opening-hours"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Standard Opening Hour",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "customer-id",
												"value": "{{customer-id}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"dayOfWeek\": \"MONDAY\",\n    \"toTime\": \"18:00:00\",\n    \"isOpen\": true,\n    \"breaks\": [\n        {\n            \"startTime\": \"12:30:00\",\n            \"endTime\":\"14:00:00\"\n        },\n        {\n            \"startTime\": \"16:30:00\",\n            \"endTime\":\"17:00:00\"\n        }\n    ],\n    \"fromTime\": \"08:30:00\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/feature/configuration/warehouses/{{warehouse-id}}/ramp-opening-hours/d9396b89-aafc-47ea-b26a-42b52ebd4c5b",
											"host": [
												"{{url}}"
											],
											"path": [
												"feature",
												"configuration",
												"warehouses",
												"{{warehouse-id}}",
												"ramp-opening-hours",
												"d9396b89-aafc-47ea-b26a-42b52ebd4c5b"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Ramp Actual Opening Hours",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "customer-id",
												"value": "{{customer-id}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/feature/configuration/warehouses/{{warehouse-id}}/ramp-actual-opening-hours?start_date=2023-03-15&end_date=2023-03-17",
											"host": [
												"{{url}}"
											],
											"path": [
												"feature",
												"configuration",
												"warehouses",
												"{{warehouse-id}}",
												"ramp-actual-opening-hours"
											],
											"query": [
												{
													"key": "start_date",
													"value": "2023-03-15"
												},
												{
													"key": "end_date",
													"value": "2023-03-17"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Add Ramp Actual Opening Hour",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "customer-id",
												"value": "{{customer-id}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"dayOfWeek\": \"FRIDAY\",\n    \"date\": \"2023-03-16\",\n    \"isOpen\": true,\n    \"fromTime\": \"8:00:00\",\n    \"toTime\": \"14:00:00\",\n    \"breaks\": [\n        {\n            \"startTime\": \"13:30:00\",\n            \"endTime\": \"14:30:00\"\n        },\n        {\n            \"startTime\": \"12:30:00\",\n            \"endTime\": \"13:30:00\"\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/feature/configuration/warehouses/{{warehouse-id}}/ramp-actual-opening-hours",
											"host": [
												"{{url}}"
											],
											"path": [
												"feature",
												"configuration",
												"warehouses",
												"{{warehouse-id}}",
												"ramp-actual-opening-hours"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Ramp Actual Opening Hour",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "customer-id",
												"value": "{{customer-id}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"isOpen\": true,\n    \"breaks\": [\n        {\n            \"startTime\": \"13:00:00\",\n            \"endTime\": \"14:00:00\"\n        },\n        {\n            \"startTime\": \"15:00:00\",\n            \"endTime\": \"16:00:00\"\n        },\n        {\n            \"startTime\": \"10:00:00\",\n            \"endTime\": \"11:00:00\"\n        },\n        {\n            \"startTime\": \"17:00:00\",\n            \"endTime\": \"17:30:00\"\n        }\n    ],\n    \"fromTime\": \"12:00:00\",\n    \"dayOfWeek\": \"FRIDAY\",\n    \"toTime\": \"14:00:00\",\n    \"date\": \"2023-02-03\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/feature/configuration/warehouses/{{warehouse-id}}/ramp-actual-opening-hours/70a5919e-616e-460d-82ce-aa28ac047759",
											"host": [
												"{{url}}"
											],
											"path": [
												"feature",
												"configuration",
												"warehouses",
												"{{warehouse-id}}",
												"ramp-actual-opening-hours",
												"70a5919e-616e-460d-82ce-aa28ac047759"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Appointment",
					"item": [
						{
							"name": "Test Quick Book Create",
							"item": [
								{
									"name": "Test Non-Buffer Quick Book Create",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"window = {};",
													"pm.sendRequest(\"https://cdnjs.cloudflare.com/ajax/libs/Faker/3.1.0/faker.min.js\", (error, response) => {",
													"    if (error || response.code !== 200) {",
													"        pm.expect.fail('Could not load external library');",
													"    }",
													"    eval(response.text());",
													"    // Set faker library",
													"    window.faker.locale=\"en\";",
													"    pm.collectionVariables.set(\"referenceNumber\", window.faker.name.firstName());",
													"    pm.collectionVariables.set(\"appointmentFrom\", window.faker.name.firstName());",
													"    pm.collectionVariables.set(\"appointmentTill\", window.faker.name.firstName());",
													"    pm.collectionVariables.set(\"carrier\", window.faker.name.firstName());",
													"    pm.collectionVariables.set(\"shipper\", window.faker.name.firstName());",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 \", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Response time for creating new quick book appointment \"+pm.response.responseTime, function () {",
													"    // pm.expect(pm.response.responseTime).to.be.below(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "customer-id",
												"value": "{{customer-id}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"warehouseId\": \"{{warehouse-id}}\",\n    \"runType\": \"INBOUND\",\n    \"isBuffer\": false,\n    \"referenceNumber\": \"{{referencenumber}}\",\n    \"rampId\": \"{{ramp-id}}\",\n    \"appointmentFrom\": \"{{appointmentfrom}}\",\n    \"appointmentTill\": \"{{appointmenttill}}\",\n    \"carrier\": \"{{carrier}}\",\n    \"shipper\": \"{{shipper}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/feature/appointments/quick-book",
											"host": [
												"{{url}}"
											],
											"path": [
												"feature",
												"appointments",
												"quick-book"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Book Appointment Basic Flow",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let responseData = pm.response.json();\r",
											"\r",
											"pm.test(\"Succesfully created Appointment\", function(){\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"appointment-id\", responseData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "customer-id",
										"value": "{{customer-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"warehouseId\": \"{{warehouse-id}}\",\r\n    \"warehouseCustomerId\": \"{{customer-id}}\",\r\n    \"runType\": \"INBOUND\",\r\n    \"supportedLoadingTypes\": [\"BACK_SIDE_WITH_LIFT\"],\r\n    \"cargoTypes\": [\"PALLETS_SINGLE_STACKED\"],\r\n    \"appointmentFrom\": \"2023-04-05 18:00:00\",\r\n    \"appointmentTill\": \"2023-04-05 19:00:00\",\r\n    \"referenceNumber\": \"1232\",\r\n    \"vehicleLicensePlate\": \"23423-12312\",\r\n    \"trailerLicensePlate\": \"23423-12312\",\r\n    \"originName\": \"Test\",\r\n    \"originAddress\": \"ABC, TX\",\r\n    \"originLatitude\": \"23.4588974\",\r\n    \"originLongitude\": \"72.78623468\",\r\n    \"departureTime\": \"2023-04-29 11:00:00\",\r\n    \"shipper\": \"Test\",\r\n    \"carrier\": \"Test\",\r\n    \"freightForwarder\": \"Test\",\r\n    \"receiver\": \"Test\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/feature/appointments",
									"host": [
										"{{url}}"
									],
									"path": [
										"feature",
										"appointments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Available Slots",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "customer-id",
										"value": "{{customer-id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/feature/appointments/available-slots?warehouse-id={{warehouse-id}}&appointment-date&run-type=INBOUND&supported-loading-types=BACK_SIDE_WITH_LIFT&cargo-types=PALLETS_SINGLE_STACKED",
									"host": [
										"{{url}}"
									],
									"path": [
										"feature",
										"appointments",
										"available-slots"
									],
									"query": [
										{
											"key": "warehouse-id",
											"value": "{{warehouse-id}}"
										},
										{
											"key": "appointment-date",
											"value": null
										},
										{
											"key": "run-type",
											"value": "INBOUND"
										},
										{
											"key": "supported-loading-types",
											"value": "BACK_SIDE_WITH_LIFT"
										},
										{
											"key": "cargo-types",
											"value": "PALLETS_SINGLE_STACKED"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Appointment List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let responseData = pm.response.json();\r",
											"\r",
											"pm.test(\"Check the booked Appointment is created succesfully\", function() {\r",
											"    let appointmentsWithID = responseData.data.filter(obj => obj.id === pm.collectionVariables.get(\"appointment-id\"));\r",
											"    console.log(pm.environment.get(\"appointment-id\"), appointmentsWithID.length)\r",
											"    pm.expect(appointmentsWithID.length).equals(1)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "customer-id",
										"value": "{{customer-id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/feature/appointments/list?page=0&page_size=50&for=2023-04-03",
									"host": [
										"{{url}}"
									],
									"path": [
										"feature",
										"appointments",
										"list"
									],
									"query": [
										{
											"key": "unloading-types",
											"value": "BACK_SIDE_WITH_LIFT,BULK",
											"disabled": true
										},
										{
											"key": "status",
											"value": "ARRIVAL_PENDING",
											"disabled": true
										},
										{
											"key": "cargo-types",
											"value": "",
											"disabled": true
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "page_size",
											"value": "50"
										},
										{
											"key": "order_by",
											"value": "descAppointmentFrom",
											"disabled": true
										},
										{
											"key": "run-types",
											"value": "INBOUND",
											"disabled": true
										},
										{
											"key": "from",
											"value": "2023-03-20 13:36:30",
											"disabled": true
										},
										{
											"key": "to",
											"value": "2023-03-20 15:36:32",
											"disabled": true
										},
										{
											"key": "warehouse-id",
											"value": "ee6cd684-e156-4158-98e9-f8bec633a313",
											"disabled": true
										},
										{
											"key": "ramps",
											"value": "91064fdc-a56f-41ec-b903-a82fce9791fd,47c7d9a9-a63b-4d1d-a0df-0d919a98804c",
											"disabled": true
										},
										{
											"key": "for",
											"value": "2023-04-03"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Appointment Buffer List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let responseData = pm.response.json();\r",
											"\r",
											"pm.test(\"Check the booked Appointment is created succesfully\", function() {\r",
											"    let appointmentsWithID = responseData.data.filter(obj => obj.id === pm.collectionVariables.get(\"appointment-id\"));\r",
											"    console.log(pm.environment.get(\"appointment-id\"), appointmentsWithID.length)\r",
											"    pm.expect(appointmentsWithID.length).equals(1)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "customer-id",
										"value": "{{customer-id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/feature/buffer-appointments",
									"host": [
										"{{url}}"
									],
									"path": [
										"feature",
										"buffer-appointments"
									],
									"query": [
										{
											"key": "unloading-types",
											"value": "BACK_SIDE_WITH_LIFT,BULK",
											"disabled": true
										},
										{
											"key": "status",
											"value": "ARRIVAL_PENDING",
											"disabled": true
										},
										{
											"key": "cargo-types",
											"value": "",
											"disabled": true
										},
										{
											"key": "page",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page_size",
											"value": "50",
											"disabled": true
										},
										{
											"key": "order_by",
											"value": "descAppointmentFrom",
											"disabled": true
										},
										{
											"key": "run-types",
											"value": "INBOUND",
											"disabled": true
										},
										{
											"key": "from",
											"value": "2023-03-20 13:36:30",
											"disabled": true
										},
										{
											"key": "to",
											"value": "2023-03-20 15:36:32",
											"disabled": true
										},
										{
											"key": "warehouse-id",
											"value": "ee6cd684-e156-4158-98e9-f8bec633a313",
											"disabled": true
										},
										{
											"key": "ramps",
											"value": "91064fdc-a56f-41ec-b903-a82fce9791fd,47c7d9a9-a63b-4d1d-a0df-0d919a98804c",
											"disabled": true
										},
										{
											"key": "for",
											"value": "2023-04-05",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Appointment Statuses",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/feature/appointments/statuses",
									"host": [
										"{{url}}"
									],
									"path": [
										"feature",
										"appointments",
										"statuses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cargo Details",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// pm.collectionVariables.set(\"cargoDetails\", JSON.parse(pm.request.body.raw));\r",
											"// console.log(JSON.parse(pm.request.body.raw))\r",
											"// pm.test(\"Put Cargo Details for Appointment\", function() {\r",
											"//     pm.response.to.have.status(200);\r",
											"// });\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "eyJraWQiOiIxVHROR1E2Q2tiMnFUaU4wTzVrcEx6RHVsN1U1Vk9tREFzRDAxOE96cjFJPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI1M2NlMTI2Mi1jNmFhLTQ4YzgtOWFhYy1jNTk0NzYxYWNlMjgiLCJkZXZpY2Vfa2V5IjoiZXUtY2VudHJhbC0xXzUxZmI4YzA2LTE1YTUtNDNlNi1iMzBhLTQzZTBmNGNlYzhiMSIsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5ldS1jZW50cmFsLTEuYW1hem9uYXdzLmNvbVwvZXUtY2VudHJhbC0xX3Nac0h3eHlIMCIsImNsaWVudF9pZCI6IjY2YmN1OHI4dXNtaHJzcWE0MWdtY3RpdG1zIiwib3JpZ2luX2p0aSI6IjRjYjZiNDI4LTA3YTgtNGY3NC04MGIxLTE1Y2E1OWRiN2UwZSIsImV2ZW50X2lkIjoiYWM3M2YxYTUtNjg3Yy00MzQ4LThmMGUtNjM4NmJmMmI2ODhkIiwidG9rZW5fdXNlIjoiYWNjZXNzIiwic2NvcGUiOiJhd3MuY29nbml0by5zaWduaW4udXNlci5hZG1pbiIsImF1dGhfdGltZSI6MTY4MTQ3MzU2NSwiZXhwIjoxNjgxNTU5OTY1LCJpYXQiOjE2ODE0NzM1NjUsImp0aSI6Ijg3MzE1OTU3LTdlNzctNGI1OS04M2RjLTZiNjU1NzRiMTIwNSIsInVzZXJuYW1lIjoiNTNjZTEyNjItYzZhYS00OGM4LTlhYWMtYzU5NDc2MWFjZTI4In0.hmsKoRCwtWOFNsd9SjHij0W7K4Y49m4yIg26STZ-lXCQaeqHkZVcCCZ5FftOVeo2x9mDL6ZRU44wuHUYx8L9I-kt7gkuk-imkyTbmiZVAIo0G-B1VEa6smAPH-MPGi3_FwhGbJxt6tj4JGS5deWd5uAIpB5AjgnZ5JuJDtzWkgVTXdqoFNZcDbmJxQe-SxWZv2pTorwwaxTwToXpiFDk7a_OZ-XrvsMOK-9idpLs46BrRq9Brd5sCqWiWxGjyuD79C4Uza0N7kUCSUQxLqDukNbSaPx2e2qQzuuZ_C44aj5A_oqYdQG_Er3gAtP4qzVUDbfXv4QEgImd3gG1wF1Duw",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "customer-id",
										"value": "{{customer-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"UNNumber\": null,\r\n    \"sealNumber\": null,\r\n    \"swapEmpties\": null,\r\n    \"FTL_LTL\": null,\r\n    \"cargos\": [\r\n        {\r\n            \"unit\": \"PIECES\",\r\n            \"quantity\": 15,\r\n            \"cargoType\": \"PALLETS_SINGLE_STACKED\"\r\n        }\r\n    ],\r\n    \"cargoConditions\": [],\r\n    \"unit\": null,\r\n    \"cargoWeight\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/feature/appointments/{{appointment-id}}/details/cargo",
									"host": [
										"{{url}}"
									],
									"path": [
										"feature",
										"appointments",
										"{{appointment-id}}",
										"details",
										"cargo"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cargo Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let responseData = pm.response.json();\r",
											"\r",
											"pm.test(\"Succesfull get cargo details\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Cargo Details matches the created cargo Details\", function () {\r",
											"    pm.expect(responseData.UNNumber).equals(pm.collectionVariables.get(\"cargoDetails\").UNNumber);\r",
											"    pm.expect(responseData.FTL_LTL).equals(pm.collectionVariables.get(\"cargoDetails\").FTL_LTL);\r",
											"    pm.expect(responseData.swapEmpties).equals(pm.collectionVariables.get(\"cargoDetails\").swapEmpties);\r",
											"    console.log(responseData.cargoConditions)\r",
											"    console.log(pm.collectionVariables.get(\"cargoDetails\").cargoConditions)\r",
											"    _.isEqual(responseData.cargoConditions, pm.collectionVariables.get(\"cargoDetails\").cargoConditions)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "eyJraWQiOiIxVHROR1E2Q2tiMnFUaU4wTzVrcEx6RHVsN1U1Vk9tREFzRDAxOE96cjFJPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI5ZjA4N2NiMS1iNTQ1LTRjNTAtYTFiOS00ZjIwMWRkMGU4ZDQiLCJkZXZpY2Vfa2V5IjoiZXUtY2VudHJhbC0xXzkzYTFhMGVkLTNiMmYtNDk3Ni1iNjZiLTdlMDZiOTk4MDhlMSIsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5ldS1jZW50cmFsLTEuYW1hem9uYXdzLmNvbVwvZXUtY2VudHJhbC0xX3Nac0h3eHlIMCIsImNsaWVudF9pZCI6IjY2YmN1OHI4dXNtaHJzcWE0MWdtY3RpdG1zIiwib3JpZ2luX2p0aSI6ImIyYzI0MmJiLWI5OTAtNDAxOS05Mzg2LWYwYTMzNjQ0NGUxMCIsImV2ZW50X2lkIjoiYTYwYTQwOGYtNmM4Ni00MTJjLWExMTktYmE2NGRiZDE5NGE0IiwidG9rZW5fdXNlIjoiYWNjZXNzIiwic2NvcGUiOiJhd3MuY29nbml0by5zaWduaW4udXNlci5hZG1pbiIsImF1dGhfdGltZSI6MTY4MTc0MTQxMSwiZXhwIjoxNjgxODI3ODExLCJpYXQiOjE2ODE3NDE0MTEsImp0aSI6IjEzZWRjMGMzLTdiMzgtNDQxZi1hYWM2LWM4ZWJiNTA1ODBlNCIsInVzZXJuYW1lIjoiOWYwODdjYjEtYjU0NS00YzUwLWExYjktNGYyMDFkZDBlOGQ0In0.jA4ZJe0ObplBq_l56--LDJ4QMqwPbqA3RUqp1nO6qucfB4CGT7Hc0yPpFAG6ORYmx4N_ca1ifdDVJyfGlldafVjyihJR6HZCpVVnbPzffskDH4thhBa1Adkr0c0sehvCaTdMqpRSslhixJKNDVRAYMLSfWtSL878BIYz-8jujp6LXohCJUqnRJQkVIgDQ5TPtKprhWCgukafEMcQ--YUwayQQIFApIpLQcvcw_EfuGaLu5Gt2cXnaNzZQAh1YlRMLCF71xydgmB52gztxfMSNUCWKIXuz7lBDI0lm9TWrtkK2qtKt8ZCMg0CFshBNrwwoo3PVdOFCRSj4BvQB7CP7g",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "customer-id",
										"value": "{{customer-id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/feature/appointments/{{appointment-id}}/details/cargo",
									"host": [
										"{{url}}"
									],
									"path": [
										"feature",
										"appointments",
										"{{appointment-id}}",
										"details",
										"cargo"
									]
								}
							},
							"response": []
						},
						{
							"name": "People Details",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "customer-id",
										"value": "{{customer-id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/feature/appointments/{{appointment-id}}/details/people",
									"host": [
										"{{url}}"
									],
									"path": [
										"feature",
										"appointments",
										"{{appointment-id}}",
										"details",
										"people"
									]
								}
							},
							"response": []
						},
						{
							"name": "People Details",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "customer-id",
										"value": "{{customer-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"firstName\": \"Jay\",\r\n\t\"lastName\": \"Patel\",\r\n\t\"company\": \"Demo\",\r\n\t\"role\": \"OTHER\",\r\n\t\"countryCode\": 91,\r\n    \"phoneNumber\": 98979798,\r\n\t\"email\": \"demo2@123.com\",\r\n    \"id\": \"54a6339f-b29b-4dd8-a3e2-764fe6ffb6f4\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/feature/appointments/{{appointment-id}}/details/people",
									"host": [
										"{{url}}"
									],
									"path": [
										"feature",
										"appointments",
										"{{appointment-id}}",
										"details",
										"people"
									]
								}
							},
							"response": []
						},
						{
							"name": "People Details",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "customer-id",
										"value": "{{customer-id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/feature/appointments/{{appointment-id}}/details/people/12e46d46-bfc5-41bf-87a4-a67d0c84df3c",
									"host": [
										"{{url}}"
									],
									"path": [
										"feature",
										"appointments",
										"{{appointment-id}}",
										"details",
										"people",
										"12e46d46-bfc5-41bf-87a4-a67d0c84df3c"
									]
								}
							},
							"response": []
						},
						{
							"name": "Document Details",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "customer-id",
										"value": "{{customer-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"fileName\": \"hello.png\",\r\n    \"tag\": \"BILL_OF_LOADING\",\r\n    \"contentType\": \"image/png\",\r\n    \"id\": \"780fca9b-c7f1-4502-9a75-e30aa92dc85f\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/feature/appointments/{{appointment-id}}/details/document",
									"host": [
										"{{url}}"
									],
									"path": [
										"feature",
										"appointments",
										"{{appointment-id}}",
										"details",
										"document"
									]
								}
							},
							"response": []
						},
						{
							"name": "Document Details",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "customer-id",
										"value": "{{customer-id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/feature/appointments/{{appointment-id}}/details/document",
									"host": [
										"{{url}}"
									],
									"path": [
										"feature",
										"appointments",
										"{{appointment-id}}",
										"details",
										"document"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cargo Enums",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/feature/appointments/details/cargo-enums",
									"host": [
										"{{url}}"
									],
									"path": [
										"feature",
										"appointments",
										"details",
										"cargo-enums"
									]
								}
							},
							"response": []
						},
						{
							"name": "People Enums",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/feature/appointments/details/people-enums",
									"host": [
										"{{url}}"
									],
									"path": [
										"feature",
										"appointments",
										"details",
										"people-enums"
									]
								}
							},
							"response": []
						},
						{
							"name": "Document Enums",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/feature/appointments/details/document-enums",
									"host": [
										"{{url}}"
									],
									"path": [
										"feature",
										"appointments",
										"details",
										"document-enums"
									]
								}
							},
							"response": []
						},
						{
							"name": "Document Details",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "customer-id",
										"value": "{{customer-id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/feature/appointments/{{appointment-id}}/details/document/f1422b0b-565b-4d14-8f89-24a5a0daede2",
									"host": [
										"{{url}}"
									],
									"path": [
										"feature",
										"appointments",
										"{{appointment-id}}",
										"details",
										"document",
										"f1422b0b-565b-4d14-8f89-24a5a0daede2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Quick Book Appointment (Non-Buffer)",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "customer-id",
										"value": "{{customer-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"warehouseId\": \"{{warehouse-id}}\",\n    \"runType\": \"INBOUND\",\n    \"isBuffer\": false,\n    \"referenceNumber\": \"#123121\",\n    \"rampId\": \"{{ramp-id}}\",\n    \"appointmentFrom\": \"2023-04-22 15:00:00\",\n    \"appointmentTill\": \"2023-04-22 16:00:00\",\n    \"carrier\": \"Carrier\",\n    \"shipper\": \"Shipper\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/feature/appointments/quick-book",
									"host": [
										"{{url}}"
									],
									"path": [
										"feature",
										"appointments",
										"quick-book"
									]
								}
							},
							"response": []
						},
						{
							"name": "Quick Book Appointment (Buffer)",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "customer-id",
										"value": "{{customer-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"warehouseId\": \"{{warehouse-id}}\",\n    \"runType\": \"INBOUND\",\n    \"isBuffer\": true,\n    \"carrier\": \"Carrier\",\n    \"shipper\": \"Shipper\",\n    \"referenceNumber\": \"#123456\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/feature/appointments/quick-book",
									"host": [
										"{{url}}"
									],
									"path": [
										"feature",
										"appointments",
										"quick-book"
									]
								}
							},
							"response": []
						},
						{
							"name": "General Details",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "customer-id",
										"value": "{{customer-id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/feature/appointments/{{appointment-id}}/details/general",
									"host": [
										"{{url}}"
									],
									"path": [
										"feature",
										"appointments",
										"{{appointment-id}}",
										"details",
										"general"
									]
								}
							},
							"response": []
						},
						{
							"name": "General Details",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "customer-id",
										"value": "{{customer-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"referenceId\": \"\",\r\n    \"vehicleLicensePlate\": \"\",\r\n    \"trailerLicensePlate\": \"MH-04-XY-8888\",\r\n    \"estimatedArrivalTime\": \"2023-10-18 11:15:00\",\r\n    \"shipper\": \"Demo Shipper Name\",\r\n    \"carrier\": \"Carrier Name\",\r\n    \"freightForwarder\": \"Freight Forwarder Name\",\r\n    \"receiver\": \"Receiver Name\",\r\n    \"status\": \"ARRIVED\",\r\n    \"priority\": \"HIGH\",\r\n    \"origin\": \"Test\",\r\n    \"originLatitude\": 10.565,\r\n    \"originLongitude\": 10.666,\r\n    \"originAddress\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/feature/appointments/{{appointment-id}}/details/general",
									"host": [
										"{{url}}"
									],
									"path": [
										"feature",
										"appointments",
										"{{appointment-id}}",
										"details",
										"general"
									]
								}
							},
							"response": []
						},
						{
							"name": "Appointment",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "customer-id",
										"value": "{{customer-id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/feature/appointments/{{appointment-id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"feature",
										"appointments",
										"{{appointment-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Appointment Priorities",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/feature/appointments/priorities",
									"host": [
										"{{url}}"
									],
									"path": [
										"feature",
										"appointments",
										"priorities"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Appointment Side Bar Details",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "customer-id",
										"value": "{{customer-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"priority\": \"LOW\",\n    \"status\": \"DEPARTED\",\n    \"appointmentFrom\": \"2023-04-16 15:00:00\",\n    \"appointmentTill\": \"2023-04-16 16:00:00\",\n    \"rampId\": \"5538e62d-88f1-42ba-832f-ea7bc97a25a0\",\n    \"warehouseId\": \"{{warehouse-id}}\",\n    \"estimatedArrivalTime\": null,\n    \"isBuffer\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/feature/appointments/{{appointment-id}}/update-side-bar-details",
									"host": [
										"{{url}}"
									],
									"path": [
										"feature",
										"appointments",
										"{{appointment-id}}",
										"update-side-bar-details"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "eyJraWQiOiIxVHROR1E2Q2tiMnFUaU4wTzVrcEx6RHVsN1U1Vk9tREFzRDAxOE96cjFJPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI5ZjA4N2NiMS1iNTQ1LTRjNTAtYTFiOS00ZjIwMWRkMGU4ZDQiLCJkZXZpY2Vfa2V5IjoiZXUtY2VudHJhbC0xXzkzYTFhMGVkLTNiMmYtNDk3Ni1iNjZiLTdlMDZiOTk4MDhlMSIsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5ldS1jZW50cmFsLTEuYW1hem9uYXdzLmNvbVwvZXUtY2VudHJhbC0xX3Nac0h3eHlIMCIsImNsaWVudF9pZCI6IjY2YmN1OHI4dXNtaHJzcWE0MWdtY3RpdG1zIiwib3JpZ2luX2p0aSI6ImIyYzI0MmJiLWI5OTAtNDAxOS05Mzg2LWYwYTMzNjQ0NGUxMCIsImV2ZW50X2lkIjoiYTYwYTQwOGYtNmM4Ni00MTJjLWExMTktYmE2NGRiZDE5NGE0IiwidG9rZW5fdXNlIjoiYWNjZXNzIiwic2NvcGUiOiJhd3MuY29nbml0by5zaWduaW4udXNlci5hZG1pbiIsImF1dGhfdGltZSI6MTY4MTc0MTQxMSwiZXhwIjoxNjgxODI3ODExLCJpYXQiOjE2ODE3NDE0MTEsImp0aSI6IjEzZWRjMGMzLTdiMzgtNDQxZi1hYWM2LWM4ZWJiNTA1ODBlNCIsInVzZXJuYW1lIjoiOWYwODdjYjEtYjU0NS00YzUwLWExYjktNGYyMDFkZDBlOGQ0In0.jA4ZJe0ObplBq_l56--LDJ4QMqwPbqA3RUqp1nO6qucfB4CGT7Hc0yPpFAG6ORYmx4N_ca1ifdDVJyfGlldafVjyihJR6HZCpVVnbPzffskDH4thhBa1Adkr0c0sehvCaTdMqpRSslhixJKNDVRAYMLSfWtSL878BIYz-8jujp6LXohCJUqnRJQkVIgDQ5TPtKprhWCgukafEMcQ--YUwayQQIFApIpLQcvcw_EfuGaLu5Gt2cXnaNzZQAh1YlRMLCF71xydgmB52gztxfMSNUCWKIXuz7lBDI0lm9TWrtkK2qtKt8ZCMg0CFshBNrwwoo3PVdOFCRSj4BvQB7CP7g",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Inject User",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"customerIdCipherText\": \"gAAAAABkL8gu6FI5gkAvrLn2h3tsJ2IpfwKV9Lm64rG-Owxq3wHtL7P9HuPxvQGvQgmWgza-p5sL5WcbvnKLr1SWCxaWSrE5wwKT3PEgnR7Y_pIlkVTkrWKPnOIyiEmxUWIuFg-0TdvC\",\r\n    \"roleCipherText\": \"gAAAAABkL8gvW9Ny2yyJDn-QIPXLc7A9ZafPFA2t5NZR-78Ji0YLCGc6agxiL2_ueGKorrF-y_CljF6jhT0VM6GQGshDOV38NFhEeGbtk4dO9nLm5qv3WltNMSPb-aR3ht-V5iJkf4BI\",\r\n    \"firstName\": \"Jay\",\r\n    \"lastName\": \"Patel\",\r\n    \"email\": \"jay.gonorth3@yopmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/feature/users/inject",
							"host": [
								"{{url}}"
							],
							"path": [
								"feature",
								"users",
								"inject"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Notification",
			"item": [
				{
					"name": "Get Notifications",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/notification",
							"host": [
								"{{url}}"
							],
							"path": [
								"notification"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "{{WarehouseImageUrl}}",
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "file",
					"file": {
						"src": "/C:/Users/DELL/Downloads/test.png"
					}
				},
				"url": {
					"raw": "{{WarehouseImageUrl}}",
					"host": [
						"{{WarehouseImageUrl}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "{{cognitoAccessToken}}",
				"type": "string"
			},
			{
				"key": "key",
				"value": "Authorization",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "customer-id",
			"value": "39cee9da-e756-4893-84e7-8e2d8e3fe33d"
		},
		{
			"key": "warehouse-id",
			"value": "c4f292fa-fb3b-4888-88b2-5450b10322b9"
		},
		{
			"key": "lastname",
			"value": ""
		},
		{
			"key": "firstname",
			"value": ""
		},
		{
			"key": "customername",
			"value": ""
		},
		{
			"key": "email",
			"value": ""
		},
		{
			"key": "invalidemail",
			"value": ""
		},
		{
			"key": "colleagueLastname",
			"value": ""
		},
		{
			"key": "colleagueFirstname",
			"value": ""
		},
		{
			"key": "colleagueEmailid",
			"value": ""
		},
		{
			"key": "WareouseName",
			"value": ""
		},
		{
			"key": "WarehouseAddress",
			"value": ""
		},
		{
			"key": "warehouseid",
			"value": ""
		},
		{
			"key": "Colleagueid",
			"value": ""
		},
		{
			"key": "colleagueupdatedLastname",
			"value": ""
		},
		{
			"key": "colleagueupdatedFirstname",
			"value": ""
		},
		{
			"key": "colleagueupdatedEmailid",
			"value": ""
		},
		{
			"key": "partnerLastname",
			"value": ""
		},
		{
			"key": "partnerFirstname",
			"value": ""
		},
		{
			"key": "partnerEmailid",
			"value": ""
		},
		{
			"key": "Partnerid",
			"value": ""
		},
		{
			"key": "partnerCustomername",
			"value": ""
		},
		{
			"key": "invalidEmailCustomer",
			"value": ""
		},
		{
			"key": "partnerupdatedLastname",
			"value": ""
		},
		{
			"key": "partnerupdatedFirstname",
			"value": ""
		},
		{
			"key": "partnerupdatedEmailid",
			"value": ""
		},
		{
			"key": "updatedwarehouse",
			"value": ""
		},
		{
			"key": "updatedWarehouseAddress",
			"value": ""
		},
		{
			"key": "partnerupdatedcustomerName",
			"value": ""
		},
		{
			"key": "warehouse_id",
			"value": ""
		},
		{
			"key": "GroupName",
			"value": ""
		},
		{
			"key": "GroupDesc",
			"value": ""
		},
		{
			"key": "responseTime",
			"value": "",
			"type": "string"
		},
		{
			"key": "UpdatedGroupName",
			"value": ""
		},
		{
			"key": "updatedGroupDesc",
			"value": ""
		},
		{
			"key": "groupid",
			"value": ""
		},
		{
			"key": "appointment-id",
			"value": ""
		},
		{
			"key": "cargoDetails",
			"value": ""
		},
		{
			"key": "RampName",
			"value": ""
		},
		{
			"key": "customeridNegative",
			"value": ""
		},
		{
			"key": "WarehouseImageUrl",
			"value": "",
			"type": "string"
		},
		{
			"key": "referenceNumber",
			"value": ""
		},
		{
			"key": "appointmentFrom",
			"value": ""
		},
		{
			"key": "appointmentTill",
			"value": ""
		},
		{
			"key": "carrier",
			"value": ""
		},
		{
			"key": "shipper",
			"value": ""
		},
		{
			"key": "rampid",
			"value": ""
		},
		{
			"key": "UpdatedRampName",
			"value": ""
		},
		{
			"key": "retryCount",
			"value": ""
		},
		{
			"key": "AuthorizationToken",
			"value": ""
		}
	]
}